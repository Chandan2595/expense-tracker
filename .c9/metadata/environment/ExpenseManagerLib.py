{"filter":false,"title":"ExpenseManagerLib.py","tooltip":"/ExpenseManagerLib.py","undoManager":{"mark":79,"position":79,"stack":[[{"start":{"row":0,"column":0},"end":{"row":34,"column":26},"action":"insert","lines":["import boto3","import uuid","","class ExpenseManagerLib:","    def __init__(self):","        self.dynamodb = boto3.resource(\"dynamodb\")","        self.s3 = boto3.client(\"s3\")","        self.table_name = \"ExpensesTable\"","        self.s3_bucket = \"your-s3-bucket-name\"","","    def categorize_expense(self, description):","        categories = {","            \"food\": [\"restaurant\", \"groceries\", \"dinner\"],","            \"transport\": [\"uber\", \"bus\", \"taxi\"],","            \"shopping\": [\"amazon\", \"electronics\"],","            \"others\": []","        }","        desc = description.lower()","        for cat, keywords in categories.items():","            if any(word in desc for word in keywords):","                return cat","        return \"others\"","","    def split_expense(self, total, users):","        split = round(total / len(users), 2)","        return {u: split for u in users}","","    def save_transaction(self, transaction):","        from decimal import Decimal","        table = self.dynamodb.Table(self.table_name)","        transaction['transaction_id'] = str(uuid.uuid4())","        transaction['category'] = self.categorize_expense(transaction['description'])","        transaction['amount'] = Decimal(str(transaction['amount']))  # Convert float to Decimal","        table.put_item(Item=transaction)","        return transaction"],"id":39}],[{"start":{"row":0,"column":0},"end":{"row":34,"column":26},"action":"remove","lines":["import boto3","import uuid","","class ExpenseManagerLib:","    def __init__(self):","        self.dynamodb = boto3.resource(\"dynamodb\")","        self.s3 = boto3.client(\"s3\")","        self.table_name = \"ExpensesTable\"","        self.s3_bucket = \"your-s3-bucket-name\"","","    def categorize_expense(self, description):","        categories = {","            \"food\": [\"restaurant\", \"groceries\", \"dinner\"],","            \"transport\": [\"uber\", \"bus\", \"taxi\"],","            \"shopping\": [\"amazon\", \"electronics\"],","            \"others\": []","        }","        desc = description.lower()","        for cat, keywords in categories.items():","            if any(word in desc for word in keywords):","                return cat","        return \"others\"","","    def split_expense(self, total, users):","        split = round(total / len(users), 2)","        return {u: split for u in users}","","    def save_transaction(self, transaction):","        from decimal import Decimal","        table = self.dynamodb.Table(self.table_name)","        transaction['transaction_id'] = str(uuid.uuid4())","        transaction['category'] = self.categorize_expense(transaction['description'])","        transaction['amount'] = Decimal(str(transaction['amount']))  # Convert float to Decimal","        table.put_item(Item=transaction)","        return transaction"],"id":40},{"start":{"row":0,"column":0},"end":{"row":34,"column":26},"action":"insert","lines":["import boto3","import uuid","","class ExpenseManagerLib:","    def __init__(self):","        self.dynamodb = boto3.resource(\"dynamodb\")","        self.s3 = boto3.client(\"s3\")","        self.table_name = \"ExpensesTable\"","        self.s3_bucket = \"your-s3-bucket-name\"","","    def categorize_expense(self, description):","        categories = {","            \"food\": [\"restaurant\", \"groceries\", \"dinner\"],","            \"transport\": [\"uber\", \"bus\", \"taxi\"],","            \"shopping\": [\"amazon\", \"electronics\"],","            \"others\": []","        }","        desc = description.lower()","        for cat, keywords in categories.items():","            if any(word in desc for word in keywords):","                return cat","        return \"others\"","","    def split_expense(self, total, users):","        split = round(total / len(users), 2)","        return {u: split for u in users}","","    def save_transaction(self, transaction):","        from decimal import Decimal","        table = self.dynamodb.Table(self.table_name)","        transaction['transaction_id'] = str(uuid.uuid4())","        transaction['category'] = self.categorize_expense(transaction['description'])","        transaction['amount'] = Decimal(str(transaction['amount']))  # Convert float to Decimal","        table.put_item(Item=transaction)","        return transaction"]}],[{"start":{"row":0,"column":0},"end":{"row":34,"column":26},"action":"remove","lines":["import boto3","import uuid","","class ExpenseManagerLib:","    def __init__(self):","        self.dynamodb = boto3.resource(\"dynamodb\")","        self.s3 = boto3.client(\"s3\")","        self.table_name = \"ExpensesTable\"","        self.s3_bucket = \"your-s3-bucket-name\"","","    def categorize_expense(self, description):","        categories = {","            \"food\": [\"restaurant\", \"groceries\", \"dinner\"],","            \"transport\": [\"uber\", \"bus\", \"taxi\"],","            \"shopping\": [\"amazon\", \"electronics\"],","            \"others\": []","        }","        desc = description.lower()","        for cat, keywords in categories.items():","            if any(word in desc for word in keywords):","                return cat","        return \"others\"","","    def split_expense(self, total, users):","        split = round(total / len(users), 2)","        return {u: split for u in users}","","    def save_transaction(self, transaction):","        from decimal import Decimal","        table = self.dynamodb.Table(self.table_name)","        transaction['transaction_id'] = str(uuid.uuid4())","        transaction['category'] = self.categorize_expense(transaction['description'])","        transaction['amount'] = Decimal(str(transaction['amount']))  # Convert float to Decimal","        table.put_item(Item=transaction)","        return transaction"],"id":41},{"start":{"row":0,"column":0},"end":{"row":50,"column":26},"action":"insert","lines":["import boto3","import uuid","","class ExpenseManagerLib:","    def __init__(self):","        self.dynamodb = boto3.resource(\"dynamodb\")","        self.s3 = boto3.client(\"s3\")","        self.table_name = \"ExpensesTable\"","        self.s3_bucket = \"your-s3-bucket-name\"","","    def categorize_expense(self, description):","        categories = {","            \"food\": [\"restaurant\", \"groceries\", \"dinner\"],","            \"transport\": [\"uber\", \"bus\", \"taxi\"],","            \"shopping\": [\"amazon\", \"electronics\"],","            \"others\": []","        }","        desc = description.lower()","        for cat, keywords in categories.items():","            if any(word in desc for word in keywords):","                return cat","        return \"others\"","","    def split_expense(self, total, users):","        split = round(total / len(users), 2)","        return {u: split for u in users}","","    def save_transaction(self, transaction):","        from decimal import Decimal","        table = self.dynamodb.Table(self.table_name)","","        # Ensure all required keys exist","        if 'transaction_id' not in transaction:","            transaction['transaction_id'] = str(uuid.uuid4())","        if 'description' in transaction and 'amount' in transaction:","            transaction['category'] = self.categorize_expense(transaction['description'])","            transaction['amount'] = Decimal(str(transaction['amount']))","            table.put_item(Item=transaction)","","            # Send SNS alert if amount is high","            if transaction['amount'] > Decimal(\"1000\"):","                self.sns.publish(","                    TopicArn=self.sns_topic_arn,","                    Subject=\"High Expense Alert\",","                    Message=f\"An expense of ₹{transaction['amount']} was added.\"","                )","","            return transaction","        else:","            raise ValueError(\"Missing 'description' or 'amount' in transaction\")","        return transaction"]}],[{"start":{"row":50,"column":26},"end":{"row":51,"column":0},"action":"insert","lines":["",""],"id":42},{"start":{"row":51,"column":0},"end":{"row":51,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":51,"column":8},"end":{"row":59,"column":0},"action":"insert","lines":["class ExpenseManagerLib:","    def __init__(self):","        self.dynamodb = boto3.resource(\"dynamodb\")","        self.s3 = boto3.client(\"s3\")","        self.sns = boto3.client(\"sns\")  # 👈 ADD THIS LINE","        self.table_name = \"ExpensesTable\"","        self.s3_bucket = \"your-s3-bucket-name\"","        self.sns_topic_arn = \"arn:aws:sns:your-region:your-account-id:ExpenseAlertTopic\"",""],"id":43}],[{"start":{"row":0,"column":0},"end":{"row":59,"column":0},"action":"remove","lines":["import boto3","import uuid","","class ExpenseManagerLib:","    def __init__(self):","        self.dynamodb = boto3.resource(\"dynamodb\")","        self.s3 = boto3.client(\"s3\")","        self.table_name = \"ExpensesTable\"","        self.s3_bucket = \"your-s3-bucket-name\"","","    def categorize_expense(self, description):","        categories = {","            \"food\": [\"restaurant\", \"groceries\", \"dinner\"],","            \"transport\": [\"uber\", \"bus\", \"taxi\"],","            \"shopping\": [\"amazon\", \"electronics\"],","            \"others\": []","        }","        desc = description.lower()","        for cat, keywords in categories.items():","            if any(word in desc for word in keywords):","                return cat","        return \"others\"","","    def split_expense(self, total, users):","        split = round(total / len(users), 2)","        return {u: split for u in users}","","    def save_transaction(self, transaction):","        from decimal import Decimal","        table = self.dynamodb.Table(self.table_name)","","        # Ensure all required keys exist","        if 'transaction_id' not in transaction:","            transaction['transaction_id'] = str(uuid.uuid4())","        if 'description' in transaction and 'amount' in transaction:","            transaction['category'] = self.categorize_expense(transaction['description'])","            transaction['amount'] = Decimal(str(transaction['amount']))","            table.put_item(Item=transaction)","","            # Send SNS alert if amount is high","            if transaction['amount'] > Decimal(\"1000\"):","                self.sns.publish(","                    TopicArn=self.sns_topic_arn,","                    Subject=\"High Expense Alert\",","                    Message=f\"An expense of ₹{transaction['amount']} was added.\"","                )","","            return transaction","        else:","            raise ValueError(\"Missing 'description' or 'amount' in transaction\")","        return transaction","        class ExpenseManagerLib:","    def __init__(self):","        self.dynamodb = boto3.resource(\"dynamodb\")","        self.s3 = boto3.client(\"s3\")","        self.sns = boto3.client(\"sns\")  # 👈 ADD THIS LINE","        self.table_name = \"ExpensesTable\"","        self.s3_bucket = \"your-s3-bucket-name\"","        self.sns_topic_arn = \"arn:aws:sns:your-region:your-account-id:ExpenseAlertTopic\"",""],"id":44},{"start":{"row":0,"column":0},"end":{"row":53,"column":0},"action":"insert","lines":["import boto3","import uuid","from decimal import Decimal","","class ExpenseManagerLib:","    def __init__(self):","        self.dynamodb = boto3.resource(\"dynamodb\")","        self.s3 = boto3.client(\"s3\")","        self.sns = boto3.client(\"sns\")","        self.table_name = \"ExpensesTable\"","        self.s3_bucket = \"your-s3-bucket-name\"","        self.sns_topic_arn = \"arn:aws:sns:your-region:your-account-id:ExpenseAlertTopic\"","","    def categorize_expense(self, description):","        categories = {","            \"food\": [\"restaurant\", \"groceries\", \"dinner\"],","            \"transport\": [\"uber\", \"bus\", \"taxi\"],","            \"shopping\": [\"amazon\", \"electronics\"],","            \"others\": []","        }","        desc = description.lower()","        for cat, keywords in categories.items():","            if any(word in desc for word in keywords):","                return cat","        return \"others\"","","    def split_expense(self, total, users):","        split = round(total / len(users), 2)","        return {u: split for u in users}","","    def save_transaction(self, transaction):","        table = self.dynamodb.Table(self.table_name)","","        # Ensure required fields","        if 'transaction_id' not in transaction:","            transaction['transaction_id'] = str(uuid.uuid4())","","        if 'description' in transaction and 'amount' in transaction:","            transaction['category'] = self.categorize_expense(transaction['description'])","            transaction['amount'] = Decimal(str(transaction['amount']))","            table.put_item(Item=transaction)","","            # Send SNS notification if amount > 1000","            if transaction['amount'] > Decimal(\"1000\"):","                self.sns.publish(","                    TopicArn=self.sns_topic_arn,","                    Subject=\"High Expense Alert\",","                    Message=f\"An expense of ₹{transaction['amount']} was added.\"","                )","","            return transaction","        else:","            raise ValueError(\"Missing 'description' or 'amount' in transaction\")",""]}],[{"start":{"row":0,"column":0},"end":{"row":53,"column":0},"action":"remove","lines":["import boto3","import uuid","from decimal import Decimal","","class ExpenseManagerLib:","    def __init__(self):","        self.dynamodb = boto3.resource(\"dynamodb\")","        self.s3 = boto3.client(\"s3\")","        self.sns = boto3.client(\"sns\")","        self.table_name = \"ExpensesTable\"","        self.s3_bucket = \"your-s3-bucket-name\"","        self.sns_topic_arn = \"arn:aws:sns:your-region:your-account-id:ExpenseAlertTopic\"","","    def categorize_expense(self, description):","        categories = {","            \"food\": [\"restaurant\", \"groceries\", \"dinner\"],","            \"transport\": [\"uber\", \"bus\", \"taxi\"],","            \"shopping\": [\"amazon\", \"electronics\"],","            \"others\": []","        }","        desc = description.lower()","        for cat, keywords in categories.items():","            if any(word in desc for word in keywords):","                return cat","        return \"others\"","","    def split_expense(self, total, users):","        split = round(total / len(users), 2)","        return {u: split for u in users}","","    def save_transaction(self, transaction):","        table = self.dynamodb.Table(self.table_name)","","        # Ensure required fields","        if 'transaction_id' not in transaction:","            transaction['transaction_id'] = str(uuid.uuid4())","","        if 'description' in transaction and 'amount' in transaction:","            transaction['category'] = self.categorize_expense(transaction['description'])","            transaction['amount'] = Decimal(str(transaction['amount']))","            table.put_item(Item=transaction)","","            # Send SNS notification if amount > 1000","            if transaction['amount'] > Decimal(\"1000\"):","                self.sns.publish(","                    TopicArn=self.sns_topic_arn,","                    Subject=\"High Expense Alert\",","                    Message=f\"An expense of ₹{transaction['amount']} was added.\"","                )","","            return transaction","        else:","            raise ValueError(\"Missing 'description' or 'amount' in transaction\")",""],"id":45},{"start":{"row":0,"column":0},"end":{"row":52,"column":0},"action":"insert","lines":["import boto3","import uuid","from decimal import Decimal","","class ExpenseManagerLib:","    def __init__(self):","        self.dynamodb = boto3.resource(\"dynamodb\")","        self.s3 = boto3.client(\"s3\")","        self.sns = boto3.client(\"sns\")  # ✅ REQUIRED","        self.table_name = \"ExpensesTable\"","        self.s3_bucket = \"your-s3-bucket-name\"  # ✅ Replace with your actual bucket name","        self.sns_topic_arn = \"arn:aws:sns:your-region:your-account-id:ExpenseAlertTopic\"  # ✅ Replace this","","    def categorize_expense(self, description):","        categories = {","            \"food\": [\"restaurant\", \"groceries\", \"dinner\"],","            \"transport\": [\"uber\", \"bus\", \"taxi\"],","            \"shopping\": [\"amazon\", \"electronics\"],","            \"others\": []","        }","        desc = description.lower()","        for cat, keywords in categories.items():","            if any(word in desc for word in keywords):","                return cat","        return \"others\"","","    def split_expense(self, total, users):","        split = round(total / len(users), 2)","        return {u: split for u in users}","","    def save_transaction(self, transaction):","        table = self.dynamodb.Table(self.table_name)","","        if 'transaction_id' not in transaction:","            transaction['transaction_id'] = str(uuid.uuid4())","","        if 'description' in transaction and 'amount' in transaction:","            transaction['category'] = self.categorize_expense(transaction['description'])","            transaction['amount'] = Decimal(str(transaction['amount']))","            table.put_item(Item=transaction)","","            # ✅ Send SNS alert if amount is high","            if transaction['amount'] > Decimal(\"1000\"):","                self.sns.publish(","                    TopicArn=self.sns_topic_arn,","                    Subject=\"High Expense Alert\",","                    Message=f\"An expense of ₹{transaction['amount']} was added.\"","                )","","            return transaction","        else:","            raise ValueError(\"Missing 'description' or 'amount' in transaction\")",""]}],[{"start":{"row":0,"column":0},"end":{"row":52,"column":0},"action":"remove","lines":["import boto3","import uuid","from decimal import Decimal","","class ExpenseManagerLib:","    def __init__(self):","        self.dynamodb = boto3.resource(\"dynamodb\")","        self.s3 = boto3.client(\"s3\")","        self.sns = boto3.client(\"sns\")  # ✅ REQUIRED","        self.table_name = \"ExpensesTable\"","        self.s3_bucket = \"your-s3-bucket-name\"  # ✅ Replace with your actual bucket name","        self.sns_topic_arn = \"arn:aws:sns:your-region:your-account-id:ExpenseAlertTopic\"  # ✅ Replace this","","    def categorize_expense(self, description):","        categories = {","            \"food\": [\"restaurant\", \"groceries\", \"dinner\"],","            \"transport\": [\"uber\", \"bus\", \"taxi\"],","            \"shopping\": [\"amazon\", \"electronics\"],","            \"others\": []","        }","        desc = description.lower()","        for cat, keywords in categories.items():","            if any(word in desc for word in keywords):","                return cat","        return \"others\"","","    def split_expense(self, total, users):","        split = round(total / len(users), 2)","        return {u: split for u in users}","","    def save_transaction(self, transaction):","        table = self.dynamodb.Table(self.table_name)","","        if 'transaction_id' not in transaction:","            transaction['transaction_id'] = str(uuid.uuid4())","","        if 'description' in transaction and 'amount' in transaction:","            transaction['category'] = self.categorize_expense(transaction['description'])","            transaction['amount'] = Decimal(str(transaction['amount']))","            table.put_item(Item=transaction)","","            # ✅ Send SNS alert if amount is high","            if transaction['amount'] > Decimal(\"1000\"):","                self.sns.publish(","                    TopicArn=self.sns_topic_arn,","                    Subject=\"High Expense Alert\",","                    Message=f\"An expense of ₹{transaction['amount']} was added.\"","                )","","            return transaction","        else:","            raise ValueError(\"Missing 'description' or 'amount' in transaction\")",""],"id":46},{"start":{"row":0,"column":0},"end":{"row":52,"column":26},"action":"insert","lines":["import boto3","import uuid","","class ExpenseManagerLib:","    def __init__(self):","        self.dynamodb = boto3.resource(\"dynamodb\")","        self.s3 = boto3.client(\"s3\")","        self.sns = boto3.client(\"sns\")","        self.sns_topic_arn = \"arn:aws:sns:your-region:your-account-id:ExpenseAlertTopic\"","        self.table_name = \"ExpensesTable\"","        self.s3_bucket = \"your-s3-bucket-name\"","","    def categorize_expense(self, description):","        categories = {","            \"food\": [\"restaurant\", \"groceries\", \"dinner\"],","            \"transport\": [\"uber\", \"bus\", \"taxi\"],","            \"shopping\": [\"amazon\", \"electronics\"],","            \"others\": []","        }","        desc = description.lower()","        for cat, keywords in categories.items():","            if any(word in desc for word in keywords):","                return cat","        return \"others\"","","    def split_expense(self, total, users):","        split = round(total / len(users), 2)","        return {u: split for u in users}","","    def save_transaction(self, transaction):","        from decimal import Decimal","        table = self.dynamodb.Table(self.table_name)","","        # Ensure all required keys exist","        if 'transaction_id' not in transaction:","            transaction['transaction_id'] = str(uuid.uuid4())","        if 'description' in transaction and 'amount' in transaction:","            transaction['category'] = self.categorize_expense(transaction['description'])","            transaction['amount'] = Decimal(str(transaction['amount']))","            table.put_item(Item=transaction)","","            # Send SNS alert if amount is high","            if transaction['amount'] > Decimal(\"1000\"):","                self.sns.publish(","                    TopicArn=self.sns_topic_arn,","                    Subject=\"High Expense Alert\",","                    Message=f\"An expense of ₹{transaction['amount']} was added.\"","                )","","            return transaction","        else:","            raise ValueError(\"Missing 'description' or 'amount' in transaction\")","        return transaction"]}],[{"start":{"row":0,"column":0},"end":{"row":52,"column":26},"action":"remove","lines":["import boto3","import uuid","","class ExpenseManagerLib:","    def __init__(self):","        self.dynamodb = boto3.resource(\"dynamodb\")","        self.s3 = boto3.client(\"s3\")","        self.sns = boto3.client(\"sns\")","        self.sns_topic_arn = \"arn:aws:sns:your-region:your-account-id:ExpenseAlertTopic\"","        self.table_name = \"ExpensesTable\"","        self.s3_bucket = \"your-s3-bucket-name\"","","    def categorize_expense(self, description):","        categories = {","            \"food\": [\"restaurant\", \"groceries\", \"dinner\"],","            \"transport\": [\"uber\", \"bus\", \"taxi\"],","            \"shopping\": [\"amazon\", \"electronics\"],","            \"others\": []","        }","        desc = description.lower()","        for cat, keywords in categories.items():","            if any(word in desc for word in keywords):","                return cat","        return \"others\"","","    def split_expense(self, total, users):","        split = round(total / len(users), 2)","        return {u: split for u in users}","","    def save_transaction(self, transaction):","        from decimal import Decimal","        table = self.dynamodb.Table(self.table_name)","","        # Ensure all required keys exist","        if 'transaction_id' not in transaction:","            transaction['transaction_id'] = str(uuid.uuid4())","        if 'description' in transaction and 'amount' in transaction:","            transaction['category'] = self.categorize_expense(transaction['description'])","            transaction['amount'] = Decimal(str(transaction['amount']))","            table.put_item(Item=transaction)","","            # Send SNS alert if amount is high","            if transaction['amount'] > Decimal(\"1000\"):","                self.sns.publish(","                    TopicArn=self.sns_topic_arn,","                    Subject=\"High Expense Alert\",","                    Message=f\"An expense of ₹{transaction['amount']} was added.\"","                )","","            return transaction","        else:","            raise ValueError(\"Missing 'description' or 'amount' in transaction\")","        return transaction"],"id":47},{"start":{"row":0,"column":0},"end":{"row":29,"column":26},"action":"insert","lines":["import boto3","from decimal import Decimal","","class ExpenseManagerLib:","    def __init__(self):","        self.dynamodb = boto3.resource(\"dynamodb\")","        self.s3 = boto3.client(\"s3\")","        self.sns = boto3.client(\"sns\")","        self.table_name = \"ExpensesTable\"","        self.s3_bucket = \"your-s3-bucket-name\"","        self.sns_topic_arn = \"arn:aws:sns:your-region:your-account-id:ExpenseAlertTopic\"","","    def save_transaction(self, transaction):","        table = self.dynamodb.Table(self.table_name)","        transaction['transaction_id'] = str(uuid.uuid4())","        transaction['category'] = self.categorize_expense(transaction['description'])","        transaction['amount'] = Decimal(str(transaction['amount']))","        table.put_item(Item=transaction)","","        if transaction['amount'] > Decimal(\"1000\"):","            try:","                self.sns.publish(","                    TopicArn=self.sns_topic_arn,","                    Subject=\"High Expense Alert\",","                    Message=f\"An expense of ₹{transaction['amount']} was added.\"","                )","            except Exception as e:","                print(\"⚠️ SNS publish failed (can be ignored if not set up):\", e)","","        return transaction"]}],[{"start":{"row":10,"column":30},"end":{"row":10,"column":87},"action":"remove","lines":["arn:aws:sns:your-region:your-account-id:ExpenseAlertTopic"],"id":48},{"start":{"row":10,"column":30},"end":{"row":10,"column":82},"action":"insert","lines":["arn:aws:sns:eu-west-1:250738637992:ExpenseAlertTopic"]}],[{"start":{"row":0,"column":0},"end":{"row":29,"column":26},"action":"remove","lines":["import boto3","from decimal import Decimal","","class ExpenseManagerLib:","    def __init__(self):","        self.dynamodb = boto3.resource(\"dynamodb\")","        self.s3 = boto3.client(\"s3\")","        self.sns = boto3.client(\"sns\")","        self.table_name = \"ExpensesTable\"","        self.s3_bucket = \"your-s3-bucket-name\"","        self.sns_topic_arn = \"arn:aws:sns:eu-west-1:250738637992:ExpenseAlertTopic\"","","    def save_transaction(self, transaction):","        table = self.dynamodb.Table(self.table_name)","        transaction['transaction_id'] = str(uuid.uuid4())","        transaction['category'] = self.categorize_expense(transaction['description'])","        transaction['amount'] = Decimal(str(transaction['amount']))","        table.put_item(Item=transaction)","","        if transaction['amount'] > Decimal(\"1000\"):","            try:","                self.sns.publish(","                    TopicArn=self.sns_topic_arn,","                    Subject=\"High Expense Alert\",","                    Message=f\"An expense of ₹{transaction['amount']} was added.\"","                )","            except Exception as e:","                print(\"⚠️ SNS publish failed (can be ignored if not set up):\", e)","","        return transaction"],"id":49},{"start":{"row":0,"column":0},"end":{"row":33,"column":26},"action":"insert","lines":["import boto3","from decimal import Decimal","","class ExpenseManagerLib:","    def __init__(self):","        self.dynamodb = boto3.resource(\"dynamodb\")","        self.s3 = boto3.client(\"s3\")","        self.sns = boto3.client(\"sns\")","        self.table_name = \"ExpensesTable\"","        self.s3_bucket = \"your-s3-bucket-name\"","        self.sns_topic_arn = \"arn:aws:sns:your-region:your-account-id:ExpenseAlertTopic\"","","    def save_transaction(self, transaction):","        table = self.dynamodb.Table(self.table_name)","        transaction['transaction_id'] = str(uuid.uuid4())","        transaction['category'] = self.categorize_expense(transaction['description'])","        transaction['amount'] = Decimal(str(transaction['amount']))","        table.put_item(Item=transaction)","","        if transaction['amount'] > Decimal(\"1000\"):","    print(\"📢 Trying to send SNS alert...\")","    try:","        response = self.sns.publish(","            TopicArn=self.sns_topic_arn,","            Subject=\"High Expense Alert\",","            Message=f\"An expense of ₹{transaction['amount']} was added.\"","        )","        print(\"✅ SNS alert sent successfully:\", response)","    except Exception as e:","        print(\"⚠️ SNS publish failed:\", e)","            except Exception as e:","                print(\"⚠️ SNS publish failed (can be ignored if not set up):\", e)","","        return transaction"]}],[{"start":{"row":0,"column":0},"end":{"row":33,"column":26},"action":"remove","lines":["import boto3","from decimal import Decimal","","class ExpenseManagerLib:","    def __init__(self):","        self.dynamodb = boto3.resource(\"dynamodb\")","        self.s3 = boto3.client(\"s3\")","        self.sns = boto3.client(\"sns\")","        self.table_name = \"ExpensesTable\"","        self.s3_bucket = \"your-s3-bucket-name\"","        self.sns_topic_arn = \"arn:aws:sns:your-region:your-account-id:ExpenseAlertTopic\"","","    def save_transaction(self, transaction):","        table = self.dynamodb.Table(self.table_name)","        transaction['transaction_id'] = str(uuid.uuid4())","        transaction['category'] = self.categorize_expense(transaction['description'])","        transaction['amount'] = Decimal(str(transaction['amount']))","        table.put_item(Item=transaction)","","        if transaction['amount'] > Decimal(\"1000\"):","    print(\"📢 Trying to send SNS alert...\")","    try:","        response = self.sns.publish(","            TopicArn=self.sns_topic_arn,","            Subject=\"High Expense Alert\",","            Message=f\"An expense of ₹{transaction['amount']} was added.\"","        )","        print(\"✅ SNS alert sent successfully:\", response)","    except Exception as e:","        print(\"⚠️ SNS publish failed:\", e)","            except Exception as e:","                print(\"⚠️ SNS publish failed (can be ignored if not set up):\", e)","","        return transaction"],"id":50},{"start":{"row":0,"column":0},"end":{"row":31,"column":0},"action":"insert","lines":["def save_transaction(self, transaction):","    from decimal import Decimal","    import uuid","","    table = self.dynamodb.Table(self.table_name)","","    # Ensure required fields","    if 'transaction_id' not in transaction:","        transaction['transaction_id'] = str(uuid.uuid4())","","    if 'description' in transaction and 'amount' in transaction:","        transaction['category'] = self.categorize_expense(transaction['description'])","        transaction['amount'] = Decimal(str(transaction['amount']))","        table.put_item(Item=transaction)","","        # SNS notification for high expense","        if transaction['amount'] > Decimal(\"1000\"):","            print(\"📢 Trying to send SNS alert...\")","            try:","                response = self.sns.publish(","                    TopicArn=self.sns_topic_arn,","                    Subject=\"High Expense Alert\",","                    Message=f\"An expense of ₹{transaction['amount']} was added.\"","                )","                print(\"✅ SNS alert sent successfully:\", response)","            except Exception as e:","                print(\"⚠️ SNS publish failed:\", e)","","        return transaction","    else:","        raise ValueError(\"Missing 'description' or 'amount' in transaction\")",""]}],[{"start":{"row":0,"column":0},"end":{"row":31,"column":0},"action":"remove","lines":["def save_transaction(self, transaction):","    from decimal import Decimal","    import uuid","","    table = self.dynamodb.Table(self.table_name)","","    # Ensure required fields","    if 'transaction_id' not in transaction:","        transaction['transaction_id'] = str(uuid.uuid4())","","    if 'description' in transaction and 'amount' in transaction:","        transaction['category'] = self.categorize_expense(transaction['description'])","        transaction['amount'] = Decimal(str(transaction['amount']))","        table.put_item(Item=transaction)","","        # SNS notification for high expense","        if transaction['amount'] > Decimal(\"1000\"):","            print(\"📢 Trying to send SNS alert...\")","            try:","                response = self.sns.publish(","                    TopicArn=self.sns_topic_arn,","                    Subject=\"High Expense Alert\",","                    Message=f\"An expense of ₹{transaction['amount']} was added.\"","                )","                print(\"✅ SNS alert sent successfully:\", response)","            except Exception as e:","                print(\"⚠️ SNS publish failed:\", e)","","        return transaction","    else:","        raise ValueError(\"Missing 'description' or 'amount' in transaction\")",""],"id":51},{"start":{"row":0,"column":0},"end":{"row":56,"column":0},"action":"insert","lines":["import boto3","import uuid","from decimal import Decimal","","class ExpenseManagerLib:","    def __init__(self):","        self.dynamodb = boto3.resource(\"dynamodb\")","        self.s3 = boto3.client(\"s3\")","        self.sns = boto3.client(\"sns\")","        self.table_name = \"ExpensesTable\"","        self.s3_bucket = \"your-s3-bucket-name\"","        self.sns_topic_arn = \"arn:aws:sns:your-region:your-account-id:ExpenseAlertTopic\"","","    def categorize_expense(self, description):","        categories = {","            \"food\": [\"restaurant\", \"groceries\", \"dinner\"],","            \"transport\": [\"uber\", \"bus\", \"taxi\"],","            \"shopping\": [\"amazon\", \"electronics\"],","            \"others\": []","        }","        desc = description.lower()","        for cat, keywords in categories.items():","            if any(word in desc for word in keywords):","                return cat","        return \"others\"","","    def split_expense(self, total, users):","        split = round(total / len(users), 2)","        return {u: split for u in users}","","    def save_transaction(self, transaction):","        table = self.dynamodb.Table(self.table_name)","","        if 'transaction_id' not in transaction:","            transaction['transaction_id'] = str(uuid.uuid4())","","        if 'description' in transaction and 'amount' in transaction:","            transaction['category'] = self.categorize_expense(transaction['description'])","            transaction['amount'] = Decimal(str(transaction['amount']))","            table.put_item(Item=transaction)","","            if transaction['amount'] > Decimal(\"1000\"):","                print(\"📢 Trying to send SNS alert...\")","                try:","                    response = self.sns.publish(","                        TopicArn=self.sns_topic_arn,","                        Subject=\"High Expense Alert\",","                        Message=f\"An expense of ₹{transaction['amount']} was added.\"","                    )","                    print(\"✅ SNS alert sent successfully:\", response)","                except Exception as e:","                    print(\"⚠️ SNS publish failed:\", e)","","            return transaction","        else:","            raise ValueError(\"Missing 'description' or 'amount' in transaction\")",""]}],[{"start":{"row":0,"column":0},"end":{"row":56,"column":0},"action":"remove","lines":["import boto3","import uuid","from decimal import Decimal","","class ExpenseManagerLib:","    def __init__(self):","        self.dynamodb = boto3.resource(\"dynamodb\")","        self.s3 = boto3.client(\"s3\")","        self.sns = boto3.client(\"sns\")","        self.table_name = \"ExpensesTable\"","        self.s3_bucket = \"your-s3-bucket-name\"","        self.sns_topic_arn = \"arn:aws:sns:your-region:your-account-id:ExpenseAlertTopic\"","","    def categorize_expense(self, description):","        categories = {","            \"food\": [\"restaurant\", \"groceries\", \"dinner\"],","            \"transport\": [\"uber\", \"bus\", \"taxi\"],","            \"shopping\": [\"amazon\", \"electronics\"],","            \"others\": []","        }","        desc = description.lower()","        for cat, keywords in categories.items():","            if any(word in desc for word in keywords):","                return cat","        return \"others\"","","    def split_expense(self, total, users):","        split = round(total / len(users), 2)","        return {u: split for u in users}","","    def save_transaction(self, transaction):","        table = self.dynamodb.Table(self.table_name)","","        if 'transaction_id' not in transaction:","            transaction['transaction_id'] = str(uuid.uuid4())","","        if 'description' in transaction and 'amount' in transaction:","            transaction['category'] = self.categorize_expense(transaction['description'])","            transaction['amount'] = Decimal(str(transaction['amount']))","            table.put_item(Item=transaction)","","            if transaction['amount'] > Decimal(\"1000\"):","                print(\"📢 Trying to send SNS alert...\")","                try:","                    response = self.sns.publish(","                        TopicArn=self.sns_topic_arn,","                        Subject=\"High Expense Alert\",","                        Message=f\"An expense of ₹{transaction['amount']} was added.\"","                    )","                    print(\"✅ SNS alert sent successfully:\", response)","                except Exception as e:","                    print(\"⚠️ SNS publish failed:\", e)","","            return transaction","        else:","            raise ValueError(\"Missing 'description' or 'amount' in transaction\")",""],"id":52},{"start":{"row":0,"column":0},"end":{"row":58,"column":0},"action":"insert","lines":["import boto3","import uuid","from decimal import Decimal","","class ExpenseManagerLib:","    def __init__(self):","        self.dynamodb = boto3.resource(\"dynamodb\")","        self.s3 = boto3.client(\"s3\")","        self.sns = boto3.client(\"sns\")","        self.table_name = \"ExpensesTable\"","        self.s3_bucket = \"your-s3-bucket-name\"","        self.sns_topic_arn = \"arn:aws:sns:your-region:your-account-id:ExpenseAlertTopic\"","","    def categorize_expense(self, description):","        categories = {","            \"food\": [\"restaurant\", \"groceries\", \"dinner\"],","            \"transport\": [\"uber\", \"bus\", \"taxi\"],","            \"shopping\": [\"amazon\", \"electronics\"],","            \"others\": []","        }","        desc = description.lower()","        for cat, keywords in categories.items():","            if any(word in desc for word in keywords):","                return cat","        return \"others\"","","    def split_expense(self, total, users):","        split = round(total / len(users), 2)","        return {u: split for u in users}","","    def save_transaction(self, transaction):","        table = self.dynamodb.Table(self.table_name)","","        # Ensure required fields","        if 'transaction_id' not in transaction:","            transaction['transaction_id'] = str(uuid.uuid4())","","        if 'description' in transaction and 'amount' in transaction:","            transaction['category'] = self.categorize_expense(transaction['description'])","            transaction['amount'] = Decimal(str(transaction['amount']))","            table.put_item(Item=transaction)","","            # SNS notification for high expenses","            if transaction['amount'] > Decimal(\"1000\"):","                print(\"📢 Trying to send SNS alert...\")","                try:","                    response = self.sns.publish(","                        TopicArn=self.sns_topic_arn,","                        Subject=\"High Expense Alert\",","                        Message=f\"An expense of ₹{transaction['amount']} was added.\"","                    )","                    print(\"✅ SNS alert sent successfully:\", response)","                except Exception as e:","                    print(\"⚠️ SNS publish failed:\", e)","","            return transaction","        else:","            raise ValueError(\"Missing 'description' or 'amount' in transaction\")",""]}],[{"start":{"row":0,"column":0},"end":{"row":58,"column":0},"action":"remove","lines":["import boto3","import uuid","from decimal import Decimal","","class ExpenseManagerLib:","    def __init__(self):","        self.dynamodb = boto3.resource(\"dynamodb\")","        self.s3 = boto3.client(\"s3\")","        self.sns = boto3.client(\"sns\")","        self.table_name = \"ExpensesTable\"","        self.s3_bucket = \"your-s3-bucket-name\"","        self.sns_topic_arn = \"arn:aws:sns:your-region:your-account-id:ExpenseAlertTopic\"","","    def categorize_expense(self, description):","        categories = {","            \"food\": [\"restaurant\", \"groceries\", \"dinner\"],","            \"transport\": [\"uber\", \"bus\", \"taxi\"],","            \"shopping\": [\"amazon\", \"electronics\"],","            \"others\": []","        }","        desc = description.lower()","        for cat, keywords in categories.items():","            if any(word in desc for word in keywords):","                return cat","        return \"others\"","","    def split_expense(self, total, users):","        split = round(total / len(users), 2)","        return {u: split for u in users}","","    def save_transaction(self, transaction):","        table = self.dynamodb.Table(self.table_name)","","        # Ensure required fields","        if 'transaction_id' not in transaction:","            transaction['transaction_id'] = str(uuid.uuid4())","","        if 'description' in transaction and 'amount' in transaction:","            transaction['category'] = self.categorize_expense(transaction['description'])","            transaction['amount'] = Decimal(str(transaction['amount']))","            table.put_item(Item=transaction)","","            # SNS notification for high expenses","            if transaction['amount'] > Decimal(\"1000\"):","                print(\"📢 Trying to send SNS alert...\")","                try:","                    response = self.sns.publish(","                        TopicArn=self.sns_topic_arn,","                        Subject=\"High Expense Alert\",","                        Message=f\"An expense of ₹{transaction['amount']} was added.\"","                    )","                    print(\"✅ SNS alert sent successfully:\", response)","                except Exception as e:","                    print(\"⚠️ SNS publish failed:\", e)","","            return transaction","        else:","            raise ValueError(\"Missing 'description' or 'amount' in transaction\")",""],"id":53},{"start":{"row":0,"column":0},"end":{"row":58,"column":0},"action":"insert","lines":["import boto3","import uuid","from decimal import Decimal","","class ExpenseManagerLib:","    def __init__(self):","        self.dynamodb = boto3.resource(\"dynamodb\")","        self.s3 = boto3.client(\"s3\")","        self.sns = boto3.client(\"sns\")","        self.table_name = \"ExpensesTable\"","        self.s3_bucket = \"your-s3-bucket-name\"","        self.sns_topic_arn = \"arn:aws:sns:your-region:your-account-id:ExpenseAlertTopic\"","","    def categorize_expense(self, description):","        categories = {","            \"food\": [\"restaurant\", \"groceries\", \"dinner\"],","            \"transport\": [\"uber\", \"bus\", \"taxi\"],","            \"shopping\": [\"amazon\", \"electronics\"],","            \"others\": []","        }","        desc = description.lower()","        for cat, keywords in categories.items():","            if any(word in desc for word in keywords):","                return cat","        return \"others\"","","    def split_expense(self, total, users):","        split = round(total / len(users), 2)","        return {u: split for u in users}","","    def save_transaction(self, transaction):","        table = self.dynamodb.Table(self.table_name)","","        # Ensure required fields","        if 'transaction_id' not in transaction:","            transaction['transaction_id'] = str(uuid.uuid4())","","        if 'description' in transaction and 'amount' in transaction:","            transaction['category'] = self.categorize_expense(transaction['description'])","            transaction['amount'] = Decimal(str(transaction['amount']))","            table.put_item(Item=transaction)","","            # SNS notification for high expenses","            if transaction['amount'] > Decimal(\"1000\"):","                print(\"📢 Trying to send SNS alert...\")","                try:","                    response = self.sns.publish(","                        TopicArn=self.sns_topic_arn,","                        Subject=\"High Expense Alert\",","                        Message=f\"An expense of ₹{transaction['amount']} was added.\"","                    )","                    print(\"✅ SNS alert sent successfully:\", response)","                except Exception as e:","                    print(\"⚠️ SNS publish failed:\", e)","","            return transaction","        else:","            raise ValueError(\"Missing 'description' or 'amount' in transaction\")",""]}],[{"start":{"row":0,"column":0},"end":{"row":58,"column":0},"action":"remove","lines":["import boto3","import uuid","from decimal import Decimal","","class ExpenseManagerLib:","    def __init__(self):","        self.dynamodb = boto3.resource(\"dynamodb\")","        self.s3 = boto3.client(\"s3\")","        self.sns = boto3.client(\"sns\")","        self.table_name = \"ExpensesTable\"","        self.s3_bucket = \"your-s3-bucket-name\"","        self.sns_topic_arn = \"arn:aws:sns:your-region:your-account-id:ExpenseAlertTopic\"","","    def categorize_expense(self, description):","        categories = {","            \"food\": [\"restaurant\", \"groceries\", \"dinner\"],","            \"transport\": [\"uber\", \"bus\", \"taxi\"],","            \"shopping\": [\"amazon\", \"electronics\"],","            \"others\": []","        }","        desc = description.lower()","        for cat, keywords in categories.items():","            if any(word in desc for word in keywords):","                return cat","        return \"others\"","","    def split_expense(self, total, users):","        split = round(total / len(users), 2)","        return {u: split for u in users}","","    def save_transaction(self, transaction):","        table = self.dynamodb.Table(self.table_name)","","        # Ensure required fields","        if 'transaction_id' not in transaction:","            transaction['transaction_id'] = str(uuid.uuid4())","","        if 'description' in transaction and 'amount' in transaction:","            transaction['category'] = self.categorize_expense(transaction['description'])","            transaction['amount'] = Decimal(str(transaction['amount']))","            table.put_item(Item=transaction)","","            # SNS notification for high expenses","            if transaction['amount'] > Decimal(\"1000\"):","                print(\"📢 Trying to send SNS alert...\")","                try:","                    response = self.sns.publish(","                        TopicArn=self.sns_topic_arn,","                        Subject=\"High Expense Alert\",","                        Message=f\"An expense of ₹{transaction['amount']} was added.\"","                    )","                    print(\"✅ SNS alert sent successfully:\", response)","                except Exception as e:","                    print(\"⚠️ SNS publish failed:\", e)","","            return transaction","        else:","            raise ValueError(\"Missing 'description' or 'amount' in transaction\")",""],"id":54},{"start":{"row":0,"column":0},"end":{"row":40,"column":80},"action":"insert","lines":["import boto3","from decimal import Decimal","","class ExpenseManagerLib:","    def __init__(self):","        self.dynamodb = boto3.resource(\"dynamodb\")","        self.s3 = boto3.client(\"s3\")","        self.sns = boto3.client(\"sns\")","        self.table_name = \"ExpensesTable\"","        self.s3_bucket = \"your-s3-bucket-name\"","        self.sns_topic_arn = \"arn:aws:sns:your-region:your-account-id:ExpenseAlertTopic\"","","    def save_transaction(self, transaction):","        from decimal import Decimal","        import uuid","","        table = self.dynamodb.Table(self.table_name)","","        # ✅ Always assign a transaction_id","        transaction['transaction_id'] = str(uuid.uuid4())","","        if 'description' in transaction and 'amount' in transaction:","            transaction['category'] = self.categorize_expense(transaction['description'])","            transaction['amount'] = Decimal(str(transaction['amount']))","            table.put_item(Item=transaction)","","            if transaction['amount'] > Decimal(\"1000\"):","                print(\"📢 Trying to send SNS alert...\")","                try:","                    response = self.sns.publish(","                        TopicArn=self.sns_topic_arn,","                        Subject=\"High Expense Alert\",","                        Message=f\"An expense of ₹{transaction['amount']} was added.\"","                    )","                    print(\"✅ SNS alert sent successfully:\", response)","                except Exception as e:","                    print(\"⚠️ SNS publish failed:\", e)","","            return transaction","        else:","            raise ValueError(\"Missing 'description' or 'amount' in transaction\")"]}],[{"start":{"row":0,"column":0},"end":{"row":40,"column":80},"action":"remove","lines":["import boto3","from decimal import Decimal","","class ExpenseManagerLib:","    def __init__(self):","        self.dynamodb = boto3.resource(\"dynamodb\")","        self.s3 = boto3.client(\"s3\")","        self.sns = boto3.client(\"sns\")","        self.table_name = \"ExpensesTable\"","        self.s3_bucket = \"your-s3-bucket-name\"","        self.sns_topic_arn = \"arn:aws:sns:your-region:your-account-id:ExpenseAlertTopic\"","","    def save_transaction(self, transaction):","        from decimal import Decimal","        import uuid","","        table = self.dynamodb.Table(self.table_name)","","        # ✅ Always assign a transaction_id","        transaction['transaction_id'] = str(uuid.uuid4())","","        if 'description' in transaction and 'amount' in transaction:","            transaction['category'] = self.categorize_expense(transaction['description'])","            transaction['amount'] = Decimal(str(transaction['amount']))","            table.put_item(Item=transaction)","","            if transaction['amount'] > Decimal(\"1000\"):","                print(\"📢 Trying to send SNS alert...\")","                try:","                    response = self.sns.publish(","                        TopicArn=self.sns_topic_arn,","                        Subject=\"High Expense Alert\",","                        Message=f\"An expense of ₹{transaction['amount']} was added.\"","                    )","                    print(\"✅ SNS alert sent successfully:\", response)","                except Exception as e:","                    print(\"⚠️ SNS publish failed:\", e)","","            return transaction","        else:","            raise ValueError(\"Missing 'description' or 'amount' in transaction\")"],"id":55},{"start":{"row":0,"column":0},"end":{"row":43,"column":80},"action":"insert","lines":["import boto3","from decimal import Decimal","","class ExpenseManagerLib:","    def __init__(self):","        self.dynamodb = boto3.resource(\"dynamodb\")","        self.s3 = boto3.client(\"s3\")","        self.sns = boto3.client(\"sns\")","        self.table_name = \"ExpensesTable\"","        self.s3_bucket = \"your-s3-bucket-name\"","        self.sns_topic_arn = \"arn:aws:sns:your-region:your-account-id:ExpenseAlertTopic\"","","    def save_transaction(self, transaction):","        import uuid","        from decimal import Decimal","","        table = self.dynamodb.Table(self.table_name)","","        # ✅ Always assign a transaction_id","        transaction['transaction_id'] = str(uuid.uuid4())","","        if 'description' in transaction and 'amount' in transaction:","            transaction['category'] = self.categorize_expense(transaction['description'])","            transaction['amount'] = Decimal(str(transaction['amount']))","            print(\"📝 Prepared transaction to insert:\", transaction)","            table.put_item(Item=transaction)","","            if transaction['amount'] > Decimal(\"1000\"):","                print(\"📢 Sending SNS alert...\")","                try:","                    response = self.sns.publish(","                        TopicArn=self.sns_topic_arn,","                        Subject=\"High Expense Alert\",","                        Message=f\"An expense of ₹{transaction['amount']} was added.\"","                    )","                    print(\"✅ SNS alert response:\", response)","                except Exception as e:","                    print(\"⚠️ SNS alert failed:\", e)","","            return transaction","        else:","            raise ValueError(\"Missing 'description' or 'amount' in transaction\")","        else:","            raise ValueError(\"Missing 'description' or 'amount' in transaction\")"]}],[{"start":{"row":0,"column":0},"end":{"row":43,"column":80},"action":"remove","lines":["import boto3","from decimal import Decimal","","class ExpenseManagerLib:","    def __init__(self):","        self.dynamodb = boto3.resource(\"dynamodb\")","        self.s3 = boto3.client(\"s3\")","        self.sns = boto3.client(\"sns\")","        self.table_name = \"ExpensesTable\"","        self.s3_bucket = \"your-s3-bucket-name\"","        self.sns_topic_arn = \"arn:aws:sns:your-region:your-account-id:ExpenseAlertTopic\"","","    def save_transaction(self, transaction):","        import uuid","        from decimal import Decimal","","        table = self.dynamodb.Table(self.table_name)","","        # ✅ Always assign a transaction_id","        transaction['transaction_id'] = str(uuid.uuid4())","","        if 'description' in transaction and 'amount' in transaction:","            transaction['category'] = self.categorize_expense(transaction['description'])","            transaction['amount'] = Decimal(str(transaction['amount']))","            print(\"📝 Prepared transaction to insert:\", transaction)","            table.put_item(Item=transaction)","","            if transaction['amount'] > Decimal(\"1000\"):","                print(\"📢 Sending SNS alert...\")","                try:","                    response = self.sns.publish(","                        TopicArn=self.sns_topic_arn,","                        Subject=\"High Expense Alert\",","                        Message=f\"An expense of ₹{transaction['amount']} was added.\"","                    )","                    print(\"✅ SNS alert response:\", response)","                except Exception as e:","                    print(\"⚠️ SNS alert failed:\", e)","","            return transaction","        else:","            raise ValueError(\"Missing 'description' or 'amount' in transaction\")","        else:","            raise ValueError(\"Missing 'description' or 'amount' in transaction\")"],"id":56},{"start":{"row":0,"column":0},"end":{"row":50,"column":80},"action":"insert","lines":["import boto3","from decimal import Decimal","","class ExpenseManagerLib:","    def __init__(self):","        self.dynamodb = boto3.resource(\"dynamodb\")","        self.s3 = boto3.client(\"s3\")","        self.sns = boto3.client(\"sns\")","        self.table_name = \"ExpensesTable\"","        self.s3_bucket = \"your-s3-bucket-name\"","        self.sns_topic_arn = \"arn:aws:sns:your-region:your-account-id:ExpenseAlertTopic\"","","    def save_transaction(self, transaction):","        import uuid","        from decimal import Decimal","","        table = self.dynamodb.Table(self.table_name)","","        # ✅ Ensure transaction_id is added FIRST","        if 'transaction_id' not in transaction or not transaction['transaction_id']:","            transaction['transaction_id'] = str(uuid.uuid4())","","        if 'description' in transaction and 'amount' in transaction:","            transaction['category'] = self.categorize_expense(transaction['description'])","            transaction['amount'] = Decimal(str(transaction['amount']))","","            print(\"📝 Final transaction to insert:\", transaction)","","            # ✅ Save to DynamoDB","            table.put_item(Item=transaction)","","            # ✅ Send SNS alert if amount > 1000","            if transaction['amount'] > Decimal(\"1000\"):","                print(\"📢 Sending SNS alert...\")","                try:","                    response = self.sns.publish(","                        TopicArn=self.sns_topic_arn,","                        Subject=\"High Expense Alert\",","                        Message=f\"An expense of ₹{transaction['amount']} was added.\"","                    )","                    print(\"✅ SNS alert response:\", response)","                except Exception as e:","                    print(\"⚠️ SNS alert failed:\", e)","","            return transaction","        else:","            raise ValueError(\"Missing 'description' or 'amount' in transaction\")","        else:","            raise ValueError(\"Missing 'description' or 'amount' in transaction\")","        else:","            raise ValueError(\"Missing 'description' or 'amount' in transaction\")"]}],[{"start":{"row":0,"column":0},"end":{"row":50,"column":80},"action":"remove","lines":["import boto3","from decimal import Decimal","","class ExpenseManagerLib:","    def __init__(self):","        self.dynamodb = boto3.resource(\"dynamodb\")","        self.s3 = boto3.client(\"s3\")","        self.sns = boto3.client(\"sns\")","        self.table_name = \"ExpensesTable\"","        self.s3_bucket = \"your-s3-bucket-name\"","        self.sns_topic_arn = \"arn:aws:sns:your-region:your-account-id:ExpenseAlertTopic\"","","    def save_transaction(self, transaction):","        import uuid","        from decimal import Decimal","","        table = self.dynamodb.Table(self.table_name)","","        # ✅ Ensure transaction_id is added FIRST","        if 'transaction_id' not in transaction or not transaction['transaction_id']:","            transaction['transaction_id'] = str(uuid.uuid4())","","        if 'description' in transaction and 'amount' in transaction:","            transaction['category'] = self.categorize_expense(transaction['description'])","            transaction['amount'] = Decimal(str(transaction['amount']))","","            print(\"📝 Final transaction to insert:\", transaction)","","            # ✅ Save to DynamoDB","            table.put_item(Item=transaction)","","            # ✅ Send SNS alert if amount > 1000","            if transaction['amount'] > Decimal(\"1000\"):","                print(\"📢 Sending SNS alert...\")","                try:","                    response = self.sns.publish(","                        TopicArn=self.sns_topic_arn,","                        Subject=\"High Expense Alert\",","                        Message=f\"An expense of ₹{transaction['amount']} was added.\"","                    )","                    print(\"✅ SNS alert response:\", response)","                except Exception as e:","                    print(\"⚠️ SNS alert failed:\", e)","","            return transaction","        else:","            raise ValueError(\"Missing 'description' or 'amount' in transaction\")","        else:","            raise ValueError(\"Missing 'description' or 'amount' in transaction\")","        else:","            raise ValueError(\"Missing 'description' or 'amount' in transaction\")"],"id":57},{"start":{"row":0,"column":0},"end":{"row":66,"column":0},"action":"insert","lines":["import boto3","import uuid","from decimal import Decimal","","class ExpenseManagerLib:","    def __init__(self):","        self.dynamodb = boto3.resource(\"dynamodb\")","        self.s3 = boto3.client(\"s3\")","        self.sns = boto3.client(\"sns\")","        self.table_name = \"ExpensesTable\"","        self.s3_bucket = \"your-s3-bucket-name\"","        self.sns_topic_arn = \"arn:aws:sns:your-region:your-account-id:ExpenseAlertTopic\"","","    def categorize_expense(self, description):","        categories = {","            \"food\": [\"restaurant\", \"groceries\", \"dinner\"],","            \"transport\": [\"uber\", \"bus\", \"taxi\"],","            \"shopping\": [\"amazon\", \"electronics\"],","            \"others\": []","        }","        desc = description.lower()","        for cat, keywords in categories.items():","            if any(word in desc for word in keywords):","                return cat","        return \"others\"","","    def split_expense(self, total, users):","        split = round(total / len(users), 2)","        return {u: split for u in users}","","    def save_transaction(self, transaction):","        table = self.dynamodb.Table(self.table_name)","","        # Always assign transaction_id first","        transaction_id = str(uuid.uuid4())","        transaction['transaction_id'] = transaction_id","","        if 'description' in transaction and 'amount' in transaction:","            transaction['category'] = self.categorize_expense(transaction['description'])","            transaction['amount'] = Decimal(str(transaction['amount']))","","            print(\"📝 Final transaction to insert:\", transaction)","","            table.put_item(Item={","                'transaction_id': transaction['transaction_id'],","                'description': transaction['description'],","                'amount': transaction['amount'],","                'date': transaction['date'],","                'category': transaction['category']","            })","","            if transaction['amount'] > Decimal(\"1000\"):","                print(\"📢 Sending SNS alert...\")","                try:","                    response = self.sns.publish(","                        TopicArn=self.sns_topic_arn,","                        Subject=\"High Expense Alert\",","                        Message=f\"An expense of ₹{transaction['amount']} was added.\"","                    )","                    print(\"✅ SNS alert response:\", response)","                except Exception as e:","                    print(\"⚠️ SNS alert failed:\", e)","","            return transaction","        else:","            raise ValueError(\"Missing 'description' or 'amount' in transaction\")",""]}],[{"start":{"row":0,"column":0},"end":{"row":66,"column":0},"action":"remove","lines":["import boto3","import uuid","from decimal import Decimal","","class ExpenseManagerLib:","    def __init__(self):","        self.dynamodb = boto3.resource(\"dynamodb\")","        self.s3 = boto3.client(\"s3\")","        self.sns = boto3.client(\"sns\")","        self.table_name = \"ExpensesTable\"","        self.s3_bucket = \"your-s3-bucket-name\"","        self.sns_topic_arn = \"arn:aws:sns:your-region:your-account-id:ExpenseAlertTopic\"","","    def categorize_expense(self, description):","        categories = {","            \"food\": [\"restaurant\", \"groceries\", \"dinner\"],","            \"transport\": [\"uber\", \"bus\", \"taxi\"],","            \"shopping\": [\"amazon\", \"electronics\"],","            \"others\": []","        }","        desc = description.lower()","        for cat, keywords in categories.items():","            if any(word in desc for word in keywords):","                return cat","        return \"others\"","","    def split_expense(self, total, users):","        split = round(total / len(users), 2)","        return {u: split for u in users}","","    def save_transaction(self, transaction):","        table = self.dynamodb.Table(self.table_name)","","        # Always assign transaction_id first","        transaction_id = str(uuid.uuid4())","        transaction['transaction_id'] = transaction_id","","        if 'description' in transaction and 'amount' in transaction:","            transaction['category'] = self.categorize_expense(transaction['description'])","            transaction['amount'] = Decimal(str(transaction['amount']))","","            print(\"📝 Final transaction to insert:\", transaction)","","            table.put_item(Item={","                'transaction_id': transaction['transaction_id'],","                'description': transaction['description'],","                'amount': transaction['amount'],","                'date': transaction['date'],","                'category': transaction['category']","            })","","            if transaction['amount'] > Decimal(\"1000\"):","                print(\"📢 Sending SNS alert...\")","                try:","                    response = self.sns.publish(","                        TopicArn=self.sns_topic_arn,","                        Subject=\"High Expense Alert\",","                        Message=f\"An expense of ₹{transaction['amount']} was added.\"","                    )","                    print(\"✅ SNS alert response:\", response)","                except Exception as e:","                    print(\"⚠️ SNS alert failed:\", e)","","            return transaction","        else:","            raise ValueError(\"Missing 'description' or 'amount' in transaction\")",""],"id":58},{"start":{"row":0,"column":0},"end":{"row":68,"column":0},"action":"insert","lines":["import boto3","import uuid","from decimal import Decimal","","class ExpenseManagerLib:","    def __init__(self):","        self.dynamodb = boto3.resource(\"dynamodb\")","        self.s3 = boto3.client(\"s3\")","        self.sns = boto3.client(\"sns\")","        self.table_name = \"ExpensesTable\"","        self.s3_bucket = \"your-s3-bucket-name\"  # Replace with your actual S3 bucket name","        self.sns_topic_arn = \"arn:aws:sns:your-region:your-account-id:ExpenseAlertTopic\"  # Replace with your actual SNS ARN","","    def categorize_expense(self, description):","        categories = {","            \"food\": [\"restaurant\", \"groceries\", \"dinner\"],","            \"transport\": [\"uber\", \"bus\", \"taxi\"],","            \"shopping\": [\"amazon\", \"electronics\"],","            \"others\": []","        }","        desc = description.lower()","        for cat, keywords in categories.items():","            if any(word in desc for word in keywords):","                return cat","        return \"others\"","","    def split_expense(self, total, users):","        split = round(total / len(users), 2)","        return {u: split for u in users}","","    def save_transaction(self, transaction):","        table = self.dynamodb.Table(self.table_name)","","        # Generate a unique transaction ID","        transaction_id = str(uuid.uuid4())","        description = transaction.get(\"description\")","        amount = Decimal(str(transaction.get(\"amount\")))","        date = transaction.get(\"date\")","        category = self.categorize_expense(description)","","        # Create clean item for DynamoDB","        item = {","            \"transaction_id\": transaction_id,","            \"description\": description,","            \"amount\": amount,","            \"date\": date,","            \"category\": category","        }","","        print(\"📝 Final item to insert:\", item)","","        # Save to DynamoDB","        table.put_item(Item=item)","","        # Send SNS alert if high amount","        if amount > Decimal(\"1000\"):","            print(\"📢 Sending SNS alert...\")","            try:","                response = self.sns.publish(","                    TopicArn=self.sns_topic_arn,","                    Subject=\"High Expense Alert\",","                    Message=f\"An expense of ₹{amount} was added.\"","                )","                print(\"✅ SNS alert response:\", response)","            except Exception as e:","                print(\"⚠️ SNS alert failed:\", e)","","        return item",""]}],[{"start":{"row":18,"column":23},"end":{"row":18,"column":25},"action":"insert","lines":["\"\""],"id":60}],[{"start":{"row":18,"column":24},"end":{"row":18,"column":25},"action":"remove","lines":["\""],"id":61},{"start":{"row":18,"column":23},"end":{"row":18,"column":24},"action":"remove","lines":["\""]}],[{"start":{"row":17,"column":50},"end":{"row":18,"column":0},"action":"insert","lines":["",""],"id":62},{"start":{"row":18,"column":0},"end":{"row":18,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":18,"column":12},"end":{"row":18,"column":14},"action":"insert","lines":["\"\""],"id":63}],[{"start":{"row":18,"column":13},"end":{"row":18,"column":14},"action":"insert","lines":["O"],"id":64}],[{"start":{"row":18,"column":13},"end":{"row":18,"column":14},"action":"remove","lines":["O"],"id":65}],[{"start":{"row":18,"column":13},"end":{"row":18,"column":14},"action":"insert","lines":["o"],"id":66},{"start":{"row":18,"column":14},"end":{"row":18,"column":15},"action":"insert","lines":["n"]},{"start":{"row":18,"column":15},"end":{"row":18,"column":16},"action":"insert","lines":["l"]},{"start":{"row":18,"column":16},"end":{"row":18,"column":17},"action":"insert","lines":["i"]},{"start":{"row":18,"column":17},"end":{"row":18,"column":18},"action":"insert","lines":["n"]}],[{"start":{"row":18,"column":18},"end":{"row":18,"column":19},"action":"insert","lines":["e"],"id":67}],[{"start":{"row":18,"column":19},"end":{"row":18,"column":20},"action":"insert","lines":[" "],"id":68}],[{"start":{"row":18,"column":20},"end":{"row":18,"column":21},"action":"insert","lines":["f"],"id":69},{"start":{"row":18,"column":21},"end":{"row":18,"column":22},"action":"insert","lines":["o"]},{"start":{"row":18,"column":22},"end":{"row":18,"column":23},"action":"insert","lines":["o"]},{"start":{"row":18,"column":23},"end":{"row":18,"column":24},"action":"insert","lines":["d"]}],[{"start":{"row":18,"column":24},"end":{"row":18,"column":25},"action":"insert","lines":[" "],"id":70}],[{"start":{"row":18,"column":24},"end":{"row":18,"column":25},"action":"remove","lines":[" "],"id":71}],[{"start":{"row":18,"column":25},"end":{"row":18,"column":26},"action":"insert","lines":[":"],"id":72}],[{"start":{"row":18,"column":26},"end":{"row":18,"column":27},"action":"insert","lines":[" "],"id":73}],[{"start":{"row":18,"column":27},"end":{"row":18,"column":29},"action":"insert","lines":["[]"],"id":74}],[{"start":{"row":18,"column":28},"end":{"row":18,"column":30},"action":"insert","lines":["\"\""],"id":75}],[{"start":{"row":18,"column":29},"end":{"row":18,"column":30},"action":"insert","lines":["j"],"id":76}],[{"start":{"row":18,"column":29},"end":{"row":18,"column":30},"action":"remove","lines":["j"],"id":77}],[{"start":{"row":18,"column":29},"end":{"row":18,"column":30},"action":"insert","lines":["J"],"id":78}],[{"start":{"row":18,"column":29},"end":{"row":18,"column":30},"action":"remove","lines":["J"],"id":79}],[{"start":{"row":18,"column":29},"end":{"row":18,"column":30},"action":"insert","lines":["j"],"id":80},{"start":{"row":18,"column":30},"end":{"row":18,"column":31},"action":"insert","lines":["u"]},{"start":{"row":18,"column":31},"end":{"row":18,"column":32},"action":"insert","lines":["s"]},{"start":{"row":18,"column":32},"end":{"row":18,"column":33},"action":"insert","lines":["t"]}],[{"start":{"row":18,"column":33},"end":{"row":18,"column":34},"action":"insert","lines":[" "],"id":81},{"start":{"row":18,"column":34},"end":{"row":18,"column":35},"action":"insert","lines":["e"]},{"start":{"row":18,"column":35},"end":{"row":18,"column":36},"action":"insert","lines":["a"]},{"start":{"row":18,"column":36},"end":{"row":18,"column":37},"action":"insert","lines":["t"]}],[{"start":{"row":18,"column":38},"end":{"row":18,"column":39},"action":"insert","lines":[","],"id":82}],[{"start":{"row":18,"column":39},"end":{"row":18,"column":40},"action":"insert","lines":[" "],"id":83}],[{"start":{"row":18,"column":40},"end":{"row":18,"column":41},"action":"insert","lines":["g"],"id":84}],[{"start":{"row":18,"column":40},"end":{"row":18,"column":41},"action":"remove","lines":["g"],"id":85}],[{"start":{"row":18,"column":40},"end":{"row":18,"column":41},"action":"insert","lines":["t"],"id":86},{"start":{"row":18,"column":41},"end":{"row":18,"column":42},"action":"insert","lines":["o"]}],[{"start":{"row":18,"column":42},"end":{"row":18,"column":43},"action":"insert","lines":["o"],"id":87}],[{"start":{"row":18,"column":43},"end":{"row":18,"column":44},"action":"insert","lines":[" "],"id":88},{"start":{"row":18,"column":44},"end":{"row":18,"column":45},"action":"insert","lines":["g"]},{"start":{"row":18,"column":45},"end":{"row":18,"column":46},"action":"insert","lines":["p"]},{"start":{"row":18,"column":46},"end":{"row":18,"column":47},"action":"insert","lines":["o"]}],[{"start":{"row":18,"column":47},"end":{"row":18,"column":48},"action":"insert","lines":["d"],"id":89},{"start":{"row":18,"column":48},"end":{"row":18,"column":49},"action":"insert","lines":["\""]}],[{"start":{"row":18,"column":40},"end":{"row":18,"column":41},"action":"insert","lines":["\""],"id":90}],[{"start":{"row":18,"column":46},"end":{"row":18,"column":47},"action":"remove","lines":["p"],"id":91}],[{"start":{"row":18,"column":46},"end":{"row":18,"column":47},"action":"insert","lines":["o"],"id":92}],[{"start":{"row":18,"column":51},"end":{"row":18,"column":52},"action":"insert","lines":["<"],"id":93}],[{"start":{"row":18,"column":51},"end":{"row":18,"column":52},"action":"remove","lines":["<"],"id":94}],[{"start":{"row":18,"column":51},"end":{"row":18,"column":52},"action":"insert","lines":[","],"id":95}],[{"start":{"row":18,"column":23},"end":{"row":18,"column":24},"action":"remove","lines":["d"],"id":96},{"start":{"row":18,"column":22},"end":{"row":18,"column":23},"action":"remove","lines":["o"]},{"start":{"row":18,"column":21},"end":{"row":18,"column":22},"action":"remove","lines":["o"]},{"start":{"row":18,"column":20},"end":{"row":18,"column":21},"action":"remove","lines":["f"]}],[{"start":{"row":18,"column":19},"end":{"row":18,"column":20},"action":"remove","lines":[" "],"id":97}],[{"start":{"row":18,"column":19},"end":{"row":18,"column":20},"action":"remove","lines":["\""],"id":98}],[{"start":{"row":18,"column":19},"end":{"row":18,"column":20},"action":"insert","lines":["\""],"id":99}],[{"start":{"row":18,"column":43},"end":{"row":18,"column":44},"action":"remove","lines":["d"],"id":100},{"start":{"row":18,"column":42},"end":{"row":18,"column":43},"action":"remove","lines":["o"]},{"start":{"row":18,"column":41},"end":{"row":18,"column":42},"action":"remove","lines":["o"]},{"start":{"row":18,"column":40},"end":{"row":18,"column":41},"action":"remove","lines":["g"]},{"start":{"row":18,"column":39},"end":{"row":18,"column":40},"action":"remove","lines":[" "]}],[{"start":{"row":18,"column":28},"end":{"row":18,"column":29},"action":"remove","lines":[" "],"id":101},{"start":{"row":18,"column":27},"end":{"row":18,"column":28},"action":"remove","lines":["t"]}],[{"start":{"row":18,"column":26},"end":{"row":18,"column":27},"action":"remove","lines":["s"],"id":102},{"start":{"row":18,"column":25},"end":{"row":18,"column":26},"action":"remove","lines":["u"]},{"start":{"row":18,"column":24},"end":{"row":18,"column":25},"action":"remove","lines":["j"]}],[{"start":{"row":11,"column":30},"end":{"row":11,"column":87},"action":"remove","lines":["arn:aws:sns:your-region:your-account-id:ExpenseAlertTopic"],"id":103},{"start":{"row":11,"column":30},"end":{"row":11,"column":115},"action":"insert","lines":["aws:sns:eu-west-1:250738637992:ExpenseAlertTopic:7c2f9d80-93cd-4bb8-9956-33421f5243fd"]}],[{"start":{"row":11,"column":78},"end":{"row":11,"column":115},"action":"remove","lines":[":7c2f9d80-93cd-4bb8-9956-33421f5243fd"],"id":104}],[{"start":{"row":11,"column":30},"end":{"row":11,"column":78},"action":"remove","lines":["aws:sns:eu-west-1:250738637992:ExpenseAlertTopic"],"id":105},{"start":{"row":11,"column":30},"end":{"row":11,"column":82},"action":"insert","lines":["arn:aws:sns:eu-west-1:250738637992:ExpenseAlertTopic"]}],[{"start":{"row":11,"column":30},"end":{"row":11,"column":82},"action":"remove","lines":["arn:aws:sns:eu-west-1:250738637992:ExpenseAlertTopic"],"id":106},{"start":{"row":11,"column":30},"end":{"row":11,"column":82},"action":"insert","lines":["arn:aws:sns:eu-west-1:250738637992:ExpenseAlertTopic"]}],[{"start":{"row":11,"column":8},"end":{"row":11,"column":84},"action":"remove","lines":["self.sns_topic_arn = \"arn:aws:sns:eu-west-1:250738637992:ExpenseAlertTopic\" "],"id":107},{"start":{"row":11,"column":8},"end":{"row":12,"column":0},"action":"insert","lines":["self.sns_topic_arn = \"arn:aws:sns:eu-west-1:250738637992:ExpenseAlertTopic\"",""]}],[{"start":{"row":11,"column":83},"end":{"row":12,"column":0},"action":"remove","lines":["",""],"id":108}],[{"start":{"row":4,"column":0},"end":{"row":11,"column":118},"action":"remove","lines":["class ExpenseManagerLib:","    def __init__(self):","        self.dynamodb = boto3.resource(\"dynamodb\")","        self.s3 = boto3.client(\"s3\")","        self.sns = boto3.client(\"sns\")","        self.table_name = \"ExpensesTable\"","        self.s3_bucket = \"your-s3-bucket-name\"  # Replace with your actual S3 bucket name","        self.sns_topic_arn = \"arn:aws:sns:eu-west-1:250738637992:ExpenseAlertTopic\" # Replace with your actual SNS ARN"],"id":109},{"start":{"row":4,"column":0},"end":{"row":14,"column":0},"action":"insert","lines":["import boto3","","class ExpenseManagerLib:","    def __init__(self):","        self.dynamodb = boto3.resource(\"dynamodb\")","        self.s3 = boto3.client(\"s3\")","        self.sns = boto3.client(\"sns\")","        self.table_name = \"ExpensesTable\"","        self.s3_bucket = \"your-s3-bucket-name\"  # Replace if needed","        self.sns_topic_arn = \"arn:aws:sns:eu-west-1:250738637992:ExpenseAlertTopic\"",""]}],[{"start":{"row":0,"column":0},"end":{"row":72,"column":0},"action":"remove","lines":["import boto3","import uuid","from decimal import Decimal","","import boto3","","class ExpenseManagerLib:","    def __init__(self):","        self.dynamodb = boto3.resource(\"dynamodb\")","        self.s3 = boto3.client(\"s3\")","        self.sns = boto3.client(\"sns\")","        self.table_name = \"ExpensesTable\"","        self.s3_bucket = \"your-s3-bucket-name\"  # Replace if needed","        self.sns_topic_arn = \"arn:aws:sns:eu-west-1:250738637992:ExpenseAlertTopic\"","","","    def categorize_expense(self, description):","        categories = {","            \"food\": [\"restaurant\", \"groceries\", \"dinner\"],","            \"transport\": [\"uber\", \"bus\", \"taxi\"],","            \"shopping\": [\"amazon\", \"electronics\"],","            \"online\": [\"eat\", \"too\"],","            \"others\": []","        }","        desc = description.lower()","        for cat, keywords in categories.items():","            if any(word in desc for word in keywords):","                return cat","        return \"others\"","","    def split_expense(self, total, users):","        split = round(total / len(users), 2)","        return {u: split for u in users}","","    def save_transaction(self, transaction):","        table = self.dynamodb.Table(self.table_name)","","        # Generate a unique transaction ID","        transaction_id = str(uuid.uuid4())","        description = transaction.get(\"description\")","        amount = Decimal(str(transaction.get(\"amount\")))","        date = transaction.get(\"date\")","        category = self.categorize_expense(description)","","        # Create clean item for DynamoDB","        item = {","            \"transaction_id\": transaction_id,","            \"description\": description,","            \"amount\": amount,","            \"date\": date,","            \"category\": category","        }","","        print(\"📝 Final item to insert:\", item)","","        # Save to DynamoDB","        table.put_item(Item=item)","","        # Send SNS alert if high amount","        if amount > Decimal(\"1000\"):","            print(\"📢 Sending SNS alert...\")","            try:","                response = self.sns.publish(","                    TopicArn=self.sns_topic_arn,","                    Subject=\"High Expense Alert\",","                    Message=f\"An expense of ₹{amount} was added.\"","                )","                print(\"✅ SNS alert response:\", response)","            except Exception as e:","                print(\"⚠️ SNS alert failed:\", e)","","        return item",""],"id":110},{"start":{"row":0,"column":0},"end":{"row":55,"column":0},"action":"insert","lines":["import boto3","from decimal import Decimal","import uuid","","class ExpenseManagerLib:","    def __init__(self):","        self.dynamodb = boto3.resource(\"dynamodb\")","        self.s3 = boto3.client(\"s3\")","        self.sns = boto3.client(\"sns\")","        self.table_name = \"ExpensesTable\"","        self.s3_bucket = \"your-s3-bucket-name\"  # Replace if needed","        self.sns_topic_arn = \"arn:aws:sns:eu-west-1:250738637992:ExpenseAlertTopic\"","","    def categorize_expense(self, description):","        desc = description.lower()","        if \"food\" in desc or \"dinner\" in desc:","            return \"food\"","        elif \"uber\" in desc or \"taxi\" in desc:","            return \"transport\"","        elif \"rent\" in desc or \"lease\" in desc:","            return \"housing\"","        else:","            return \"others\"","","    def save_transaction(self, transaction):","        table = self.dynamodb.Table(self.table_name)","","        # Generate transaction ID if missing","        if 'transaction_id' not in transaction or not transaction['transaction_id']:","            transaction['transaction_id'] = str(uuid.uuid4())","","        if 'description' in transaction and 'amount' in transaction:","            transaction['category'] = self.categorize_expense(transaction['description'])","            transaction['amount'] = Decimal(str(transaction['amount']))","","            print(\"✅ Using SNS ARN:\", self.sns_topic_arn)","","            # Save to DynamoDB","            table.put_item(Item=transaction)","","            # Send SNS alert if amount > 1000","            if transaction['amount'] > Decimal(\"1000\"):","                print(\"📢 Trying to send SNS alert...\")","                try:","                    response = self.sns.publish(","                        TopicArn=self.sns_topic_arn,","                        Subject=\"High Expense Alert\",","                        Message=f\"An expense of ₹{transaction['amount']} was added.\"","                    )","                    print(\"✅ SNS alert response:\", response)","                except Exception as e:","                    print(\"⚠️ SNS publish failed:\", e)","            return transaction","        else:","            raise ValueError(\"Missing 'description' or 'amount' in transaction\")",""]}],[{"start":{"row":11,"column":30},"end":{"row":11,"column":63},"action":"remove","lines":["arn:aws:sns:eu-west-1:25073863799"],"id":111},{"start":{"row":11,"column":30},"end":{"row":11,"column":64},"action":"insert","lines":["arn:aws:sns:eu-west-1:250738637992"]}],[{"start":{"row":11,"column":63},"end":{"row":11,"column":64},"action":"remove","lines":["2"],"id":112}],[{"start":{"row":10,"column":26},"end":{"row":10,"column":45},"action":"remove","lines":["your-s3-bucket-name"],"id":113},{"start":{"row":10,"column":26},"end":{"row":10,"column":50},"action":"insert","lines":["expense-tracker-receipts"]}],[{"start":{"row":10,"column":49},"end":{"row":10,"column":50},"action":"remove","lines":["s"],"id":114}],[{"start":{"row":11,"column":83},"end":{"row":12,"column":0},"action":"insert","lines":["",""],"id":115},{"start":{"row":12,"column":0},"end":{"row":12,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":12,"column":4},"end":{"row":12,"column":8},"action":"remove","lines":["    "],"id":117},{"start":{"row":12,"column":0},"end":{"row":12,"column":4},"action":"remove","lines":["    "]},{"start":{"row":11,"column":83},"end":{"row":12,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":0,"column":0},"end":{"row":55,"column":0},"action":"remove","lines":["import boto3","from decimal import Decimal","import uuid","","class ExpenseManagerLib:","    def __init__(self):","        self.dynamodb = boto3.resource(\"dynamodb\")","        self.s3 = boto3.client(\"s3\")","        self.sns = boto3.client(\"sns\")","        self.table_name = \"ExpensesTable\"","        self.s3_bucket = \"expense-tracker-receipt\"  # Replace if needed","        self.sns_topic_arn = \"arn:aws:sns:eu-west-1:250738637992:ExpenseAlertTopic\"","","    def categorize_expense(self, description):","        desc = description.lower()","        if \"food\" in desc or \"dinner\" in desc:","            return \"food\"","        elif \"uber\" in desc or \"taxi\" in desc:","            return \"transport\"","        elif \"rent\" in desc or \"lease\" in desc:","            return \"housing\"","        else:","            return \"others\"","","    def save_transaction(self, transaction):","        table = self.dynamodb.Table(self.table_name)","","        # Generate transaction ID if missing","        if 'transaction_id' not in transaction or not transaction['transaction_id']:","            transaction['transaction_id'] = str(uuid.uuid4())","","        if 'description' in transaction and 'amount' in transaction:","            transaction['category'] = self.categorize_expense(transaction['description'])","            transaction['amount'] = Decimal(str(transaction['amount']))","","            print(\"✅ Using SNS ARN:\", self.sns_topic_arn)","","            # Save to DynamoDB","            table.put_item(Item=transaction)","","            # Send SNS alert if amount > 1000","            if transaction['amount'] > Decimal(\"1000\"):","                print(\"📢 Trying to send SNS alert...\")","                try:","                    response = self.sns.publish(","                        TopicArn=self.sns_topic_arn,","                        Subject=\"High Expense Alert\",","                        Message=f\"An expense of ₹{transaction['amount']} was added.\"","                    )","                    print(\"✅ SNS alert response:\", response)","                except Exception as e:","                    print(\"⚠️ SNS publish failed:\", e)","            return transaction","        else:","            raise ValueError(\"Missing 'description' or 'amount' in transaction\")",""],"id":118},{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"insert","lines":[" "]}],[{"start":{"row":0,"column":1},"end":{"row":68,"column":0},"action":"insert","lines":["import boto3","from decimal import Decimal","import uuid","","class ExpenseManagerLib:","    def __init__(self):","        self.dynamodb = boto3.resource(\"dynamodb\")","        self.s3 = boto3.client(\"s3\")","        self.sns = boto3.client(\"sns\")","        self.table_name = \"ExpensesTable\"","        self.s3_bucket = \"expense-tracker-receipt\"  # Replace if needed","        self.sns_topic_arn = \"arn:aws:sns:eu-west-1:250738637992:ExpenseAlertTopic\"","","    def categorize_expense(self, description):","        desc = description.lower()","        if \"food\" in desc or \"dinner\" in desc:","            return \"food\"","        elif \"uber\" in desc or \"taxi\" in desc:","            return \"transport\"","        elif \"rent\" in desc or \"lease\" in desc:","            return \"housing\"","        else:","            return \"others\"","","    def save_transaction(self, transaction):","        table = self.dynamodb.Table(self.table_name)","","        # Generate transaction ID if missing","        if 'transaction_id' not in transaction or not transaction['transaction_id']:","            transaction['transaction_id'] = str(uuid.uuid4())","","        if 'description' in transaction and 'amount' in transaction:","            transaction['category'] = self.categorize_expense(transaction['description'])","            transaction['amount'] = Decimal(str(transaction['amount']))","","            print(\"✅ Using SNS ARN:\", self.sns_topic_arn)","","            # Save to DynamoDB","            table.put_item(Item=transaction)","","            # Send SNS alert if amount > 1000","            if transaction['amount'] > Decimal(\"1000\"):","                print(\"📢 Trying to send SNS alert...\")","                try:","                    response = self.sns.publish(","                        TopicArn=self.sns_topic_arn,","                        Subject=\"High Expense Alert\",","                        Message=f\"An expense of ₹{transaction['amount']} was added.\"","                    )","                    print(\"✅ SNS alert response:\", response)","                except Exception as e:","                    print(\"⚠️ SNS publish failed:\", e)","            return transaction","        else:","            raise ValueError(\"Missing 'description' or 'amount' in transaction\")","","    # ✅ Add this function for expense splitting","    def split_expense(self, total_amount, users):","        try:","            total_amount = float(total_amount)","            num_users = len(users)","            if num_users == 0:","                raise ValueError(\"User list cannot be empty\")","            share = round(total_amount / num_users, 2)","            return {user: share for user in users}","        except Exception as e:","            print(\"❌ Split expense error:\", e)","            raise",""],"id":119}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"remove","lines":[" "],"id":120}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":0,"column":0},"end":{"row":0,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":69,"mode":"ace/mode/python"}},"timestamp":1741906390852,"hash":"eb417f71a3dbc8192a176d2ffeb1060c81683896"}