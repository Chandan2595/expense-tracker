{"filter":false,"title":"app.py","tooltip":"/app.py","undoManager":{"mark":25,"position":25,"stack":[[{"start":{"row":0,"column":0},"end":{"row":36,"column":50},"action":"insert","lines":["from flask import Flask, request, jsonify","from ExpenseManagerLib import ExpenseManagerLib","import logging","import watchtower","","app = Flask(__name__)","manager = ExpenseManagerLib()","","# Set up CloudWatch logging (no region_name or boto3_session to avoid errors)","logger = logging.getLogger(__name__)","logger.setLevel(logging.INFO)","try:","    handler = watchtower.CloudWatchLogHandler(log_group='ExpenseTrackerLogGroup')","    logger.addHandler(handler)","except Exception as e:","    print(\"CloudWatch logging failed:\", e)","","@app.route(\"/add_expense\", methods=[\"POST\"])","def add_expense():","    data = request.json","    result = manager.save_transaction(data)","    logger.info(f\"New expense added: {result}\")","    return jsonify({\"status\": \"success\", \"transaction\": result})","","@app.route(\"/split_expense\", methods=[\"POST\"])","def split_expense():","    data = request.json","    result = manager.split_expense(data['total_amount'], data['users'])","    logger.info(f\"Expense split result: {result}\")","    return jsonify({\"status\": \"success\", \"split_details\": result})","","@app.route(\"/\", methods=[\"GET\"])","def home():","    return \"Welcome to the AI-Based Expense Tracker API! Use /add_expense or /split_expense.\"","","if __name__ == \"__main__\":","    app.run(debug=True, host=\"0.0.0.0\", port=8080)"],"id":89}],[{"start":{"row":0,"column":0},"end":{"row":36,"column":50},"action":"remove","lines":["from flask import Flask, request, jsonify","from ExpenseManagerLib import ExpenseManagerLib","import logging","import watchtower","","app = Flask(__name__)","manager = ExpenseManagerLib()","","# Set up CloudWatch logging (no region_name or boto3_session to avoid errors)","logger = logging.getLogger(__name__)","logger.setLevel(logging.INFO)","try:","    handler = watchtower.CloudWatchLogHandler(log_group='ExpenseTrackerLogGroup')","    logger.addHandler(handler)","except Exception as e:","    print(\"CloudWatch logging failed:\", e)","","@app.route(\"/add_expense\", methods=[\"POST\"])","def add_expense():","    data = request.json","    result = manager.save_transaction(data)","    logger.info(f\"New expense added: {result}\")","    return jsonify({\"status\": \"success\", \"transaction\": result})","","@app.route(\"/split_expense\", methods=[\"POST\"])","def split_expense():","    data = request.json","    result = manager.split_expense(data['total_amount'], data['users'])","    logger.info(f\"Expense split result: {result}\")","    return jsonify({\"status\": \"success\", \"split_details\": result})","","@app.route(\"/\", methods=[\"GET\"])","def home():","    return \"Welcome to the AI-Based Expense Tracker API! Use /add_expense or /split_expense.\"","","if __name__ == \"__main__\":","    app.run(debug=True, host=\"0.0.0.0\", port=8080)"],"id":90},{"start":{"row":0,"column":0},"end":{"row":41,"column":50},"action":"insert","lines":["from flask import Flask, request, jsonify","from ExpenseManagerLib import ExpenseManagerLib","import logging","import watchtower","","app = Flask(__name__)","manager = ExpenseManagerLib()","","# Set up CloudWatch logging (no region_name or boto3_session to avoid errors)","logger = logging.getLogger(__name__)","logger.setLevel(logging.INFO)","try:","    handler = watchtower.CloudWatchLogHandler(log_group='ExpenseTrackerLogGroup')","    logger.addHandler(handler)","except Exception as e:","    print(\"CloudWatch logging failed:\", e)","","@app.route(\"/add_expense\", methods=[\"POST\"])","def add_expense():","    try:","        data = request.json","        print(\"üì• Incoming data:\", data)  # üëà This line prints the request to terminal","        result = manager.save_transaction(data)","        print(\"‚úÖ Saved to DB:\", result)  # üëà This line prints saved data","        return jsonify({\"status\": \"success\", \"transaction\": result})","    except Exception as e:","        print(\"‚ùå Error occurred:\", e)","        return jsonify({\"status\": \"error\", \"message\": str(e)}), 500","","@app.route(\"/split_expense\", methods=[\"POST\"])","def split_expense():","    data = request.json","    result = manager.split_expense(data['total_amount'], data['users'])","    logger.info(f\"Expense split result: {result}\")","    return jsonify({\"status\": \"success\", \"split_details\": result})","","@app.route(\"/\", methods=[\"GET\"])","def home():","    return \"Welcome to the AI-Based Expense Tracker API! Use /add_expense or /split_expense.\"","","if __name__ == \"__main__\":","    app.run(debug=True, host=\"0.0.0.0\", port=8080)"]}],[{"start":{"row":1,"column":0},"end":{"row":1,"column":47},"action":"remove","lines":["from ExpenseManagerLib import ExpenseManagerLib"],"id":91},{"start":{"row":1,"column":0},"end":{"row":1,"column":45},"action":"insert","lines":["from expense_manager import ExpenseManagerLib"]}],[{"start":{"row":15,"column":42},"end":{"row":16,"column":0},"action":"insert","lines":["",""],"id":92},{"start":{"row":16,"column":0},"end":{"row":16,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":16,"column":4},"end":{"row":32,"column":0},"action":"insert","lines":["from flask import render_template","","@app.route(\"/submit_expense\", methods=[\"GET\", \"POST\"])","def submit_expense():","    if request.method == \"POST\":","        description = request.form[\"description\"]","        amount = request.form[\"amount\"]","        date = request.form[\"date\"]","        transaction = {","            \"description\": description,","            \"amount\": amount,","            \"date\": date","        }","        result = manager.save_transaction(transaction)","        return jsonify({\"status\": \"success\", \"transaction\": result})","    return render_template(\"form.html\")",""],"id":93}],[{"start":{"row":16,"column":4},"end":{"row":16,"column":37},"action":"remove","lines":["from flask import render_template"],"id":94}],[{"start":{"row":16,"column":0},"end":{"row":16,"column":4},"action":"remove","lines":["    "],"id":95},{"start":{"row":15,"column":42},"end":{"row":16,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":1,"column":45},"end":{"row":2,"column":0},"action":"insert","lines":["",""],"id":96}],[{"start":{"row":2,"column":0},"end":{"row":2,"column":33},"action":"insert","lines":["from flask import render_template"],"id":97}],[{"start":{"row":58,"column":50},"end":{"row":59,"column":0},"action":"insert","lines":["",""],"id":98},{"start":{"row":59,"column":0},"end":{"row":59,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":59,"column":4},"end":{"row":61,"column":0},"action":"insert","lines":["if __name__ == \"__main__\":","    app.run(debug=True, host=\"0.0.0.0\", port=8080)",""],"id":99}],[{"start":{"row":60,"column":49},"end":{"row":60,"column":50},"action":"remove","lines":[")"],"id":100}],[{"start":{"row":60,"column":49},"end":{"row":60,"column":50},"action":"insert","lines":["1"],"id":101}],[{"start":{"row":60,"column":49},"end":{"row":60,"column":50},"action":"remove","lines":["1"],"id":102},{"start":{"row":60,"column":48},"end":{"row":60,"column":49},"action":"remove","lines":["0"]}],[{"start":{"row":60,"column":48},"end":{"row":60,"column":49},"action":"insert","lines":["1"],"id":103},{"start":{"row":60,"column":49},"end":{"row":60,"column":50},"action":"insert","lines":["}"]}],[{"start":{"row":60,"column":49},"end":{"row":60,"column":50},"action":"remove","lines":["}"],"id":104}],[{"start":{"row":60,"column":49},"end":{"row":60,"column":50},"action":"insert","lines":[")"],"id":105}],[{"start":{"row":57,"column":0},"end":{"row":60,"column":50},"action":"remove","lines":["if __name__ == \"__main__\":","    app.run(debug=True, host=\"0.0.0.0\", port=8080)","    if __name__ == \"__main__\":","    app.run(debug=True, host=\"0.0.0.0\", port=8081)"],"id":106},{"start":{"row":57,"column":0},"end":{"row":59,"column":0},"action":"insert","lines":["if __name__ == \"__main__\":","    app.run(debug=True, host=\"0.0.0.0\", port=8081)",""]}],[{"start":{"row":57,"column":0},"end":{"row":58,"column":50},"action":"remove","lines":["if __name__ == \"__main__\":","    app.run(debug=True, host=\"0.0.0.0\", port=8081)"],"id":107},{"start":{"row":57,"column":0},"end":{"row":58,"column":50},"action":"insert","lines":["if __name__ == \"__main__\":","    app.run(debug=True, host=\"0.0.0.0\", port=8080)"]}],[{"start":{"row":4,"column":17},"end":{"row":5,"column":0},"action":"insert","lines":["",""],"id":108}],[{"start":{"row":5,"column":0},"end":{"row":7,"column":0},"action":"insert","lines":["from ExpenseManagerLib import ExpenseManagerLib","print(\"üìÅ Using ExpenseManagerLib from:\", ExpenseManagerLib.__module__)",""],"id":109}],[{"start":{"row":6,"column":71},"end":{"row":7,"column":0},"action":"remove","lines":["",""],"id":110}],[{"start":{"row":0,"column":0},"end":{"row":60,"column":50},"action":"remove","lines":["from flask import Flask, request, jsonify","from expense_manager import ExpenseManagerLib","from flask import render_template","import logging","import watchtower","from ExpenseManagerLib import ExpenseManagerLib","print(\"üìÅ Using ExpenseManagerLib from:\", ExpenseManagerLib.__module__)","","app = Flask(__name__)","manager = ExpenseManagerLib()","","# Set up CloudWatch logging (no region_name or boto3_session to avoid errors)","logger = logging.getLogger(__name__)","logger.setLevel(logging.INFO)","try:","    handler = watchtower.CloudWatchLogHandler(log_group='ExpenseTrackerLogGroup')","    logger.addHandler(handler)","except Exception as e:","    print(\"CloudWatch logging failed:\", e)","","@app.route(\"/submit_expense\", methods=[\"GET\", \"POST\"])","def submit_expense():","    if request.method == \"POST\":","        description = request.form[\"description\"]","        amount = request.form[\"amount\"]","        date = request.form[\"date\"]","        transaction = {","            \"description\": description,","            \"amount\": amount,","            \"date\": date","        }","        result = manager.save_transaction(transaction)","        return jsonify({\"status\": \"success\", \"transaction\": result})","    return render_template(\"form.html\")","","","@app.route(\"/add_expense\", methods=[\"POST\"])","def add_expense():","    try:","        data = request.json","        print(\"üì• Incoming data:\", data)  # üëà This line prints the request to terminal","        result = manager.save_transaction(data)","        print(\"‚úÖ Saved to DB:\", result)  # üëà This line prints saved data","        return jsonify({\"status\": \"success\", \"transaction\": result})","    except Exception as e:","        print(\"‚ùå Error occurred:\", e)","        return jsonify({\"status\": \"error\", \"message\": str(e)}), 500","","@app.route(\"/split_expense\", methods=[\"POST\"])","def split_expense():","    data = request.json","    result = manager.split_expense(data['total_amount'], data['users'])","    logger.info(f\"Expense split result: {result}\")","    return jsonify({\"status\": \"success\", \"split_details\": result})","","@app.route(\"/\", methods=[\"GET\"])","def home():","    return \"Welcome to the AI-Based Expense Tracker API! Use /add_expense or /split_expense.\"","","if __name__ == \"__main__\":","    app.run(debug=True, host=\"0.0.0.0\", port=8080)"],"id":111},{"start":{"row":0,"column":0},"end":{"row":86,"column":0},"action":"insert","lines":["from flask import Flask, request, jsonify, render_template","from ExpenseManagerLib import ExpenseManagerLib","import logging","import watchtower","import os","from werkzeug.utils import secure_filename","","print(\"üìÅ Using ExpenseManagerLib from:\", ExpenseManagerLib.__module__)","","app = Flask(__name__)","manager = ExpenseManagerLib()","","# Set up CloudWatch logging (no region_name or boto3_session to avoid errors)","logger = logging.getLogger(__name__)","logger.setLevel(logging.INFO)","try:","    handler = watchtower.CloudWatchLogHandler(log_group='ExpenseTrackerLogGroup')","    logger.addHandler(handler)","except Exception as e:","    print(\"CloudWatch logging failed:\", e)","","@app.route(\"/submit_expense\", methods=[\"GET\", \"POST\"])","def submit_expense():","    if request.method == \"POST\":","        description = request.form[\"description\"]","        amount = request.form[\"amount\"]","        date = request.form[\"date\"]","        transaction = {","            \"description\": description,","            \"amount\": amount,","            \"date\": date","        }","        result = manager.save_transaction(transaction)","        return jsonify({\"status\": \"success\", \"transaction\": result})","    return render_template(\"form.html\")","","@app.route(\"/add_expense\", methods=[\"POST\"])","def add_expense():","    try:","        data = request.json","        print(\"üì• Incoming data:\", data)","        result = manager.save_transaction(data)","        print(\"‚úÖ Saved to DB:\", result)","        return jsonify({\"status\": \"success\", \"transaction\": result})","    except Exception as e:","        print(\"‚ùå Error occurred:\", e)","        return jsonify({\"status\": \"error\", \"message\": str(e)}), 500","","@app.route(\"/split_expense\", methods=[\"POST\"])","def split_expense():","    data = request.json","    result = manager.split_expense(data['total_amount'], data['users'])","    logger.info(f\"Expense split result: {result}\")","    return jsonify({\"status\": \"success\", \"split_details\": result})","","# ‚úÖ New route to upload receipt to S3","@app.route(\"/upload_receipt\", methods=[\"POST\"])","def upload_receipt():","    if 'file' not in request.files:","        return jsonify({\"error\": \"No file part\"}), 400","","    file = request.files['file']","    if file.filename == '':","        return jsonify({\"error\": \"No selected file\"}), 400","","    filename = secure_filename(file.filename)","    filepath = os.path.join(\"/tmp\", filename)","    file.save(filepath)","","    try:","        manager.s3.upload_file(filepath, manager.s3_bucket, filename)","        logger.info(f\"Receipt uploaded: {filename}\")","        return jsonify({","            \"status\": \"success\",","            \"message\": f\"Uploaded {filename} to S3\",","            \"s3_url\": f\"s3://{manager.s3_bucket}/{filename}\"","        })","    except Exception as e:","        return jsonify({\"status\": \"error\", \"message\": str(e)}), 500","","@app.route(\"/\", methods=[\"GET\"])","def home():","    return \"Welcome to the AI-Based Expense Tracker API! Use /add_expense, /submit_expense, /upload_receipt or /split_expense.\"","","if __name__ == \"__main__\":","    app.run(debug=True, host=\"0.0.0.0\", port=8080)",""]}],[{"start":{"row":0,"column":0},"end":{"row":86,"column":0},"action":"remove","lines":["from flask import Flask, request, jsonify, render_template","from ExpenseManagerLib import ExpenseManagerLib","import logging","import watchtower","import os","from werkzeug.utils import secure_filename","","print(\"üìÅ Using ExpenseManagerLib from:\", ExpenseManagerLib.__module__)","","app = Flask(__name__)","manager = ExpenseManagerLib()","","# Set up CloudWatch logging (no region_name or boto3_session to avoid errors)","logger = logging.getLogger(__name__)","logger.setLevel(logging.INFO)","try:","    handler = watchtower.CloudWatchLogHandler(log_group='ExpenseTrackerLogGroup')","    logger.addHandler(handler)","except Exception as e:","    print(\"CloudWatch logging failed:\", e)","","@app.route(\"/submit_expense\", methods=[\"GET\", \"POST\"])","def submit_expense():","    if request.method == \"POST\":","        description = request.form[\"description\"]","        amount = request.form[\"amount\"]","        date = request.form[\"date\"]","        transaction = {","            \"description\": description,","            \"amount\": amount,","            \"date\": date","        }","        result = manager.save_transaction(transaction)","        return jsonify({\"status\": \"success\", \"transaction\": result})","    return render_template(\"form.html\")","","@app.route(\"/add_expense\", methods=[\"POST\"])","def add_expense():","    try:","        data = request.json","        print(\"üì• Incoming data:\", data)","        result = manager.save_transaction(data)","        print(\"‚úÖ Saved to DB:\", result)","        return jsonify({\"status\": \"success\", \"transaction\": result})","    except Exception as e:","        print(\"‚ùå Error occurred:\", e)","        return jsonify({\"status\": \"error\", \"message\": str(e)}), 500","","@app.route(\"/split_expense\", methods=[\"POST\"])","def split_expense():","    data = request.json","    result = manager.split_expense(data['total_amount'], data['users'])","    logger.info(f\"Expense split result: {result}\")","    return jsonify({\"status\": \"success\", \"split_details\": result})","","# ‚úÖ New route to upload receipt to S3","@app.route(\"/upload_receipt\", methods=[\"POST\"])","def upload_receipt():","    if 'file' not in request.files:","        return jsonify({\"error\": \"No file part\"}), 400","","    file = request.files['file']","    if file.filename == '':","        return jsonify({\"error\": \"No selected file\"}), 400","","    filename = secure_filename(file.filename)","    filepath = os.path.join(\"/tmp\", filename)","    file.save(filepath)","","    try:","        manager.s3.upload_file(filepath, manager.s3_bucket, filename)","        logger.info(f\"Receipt uploaded: {filename}\")","        return jsonify({","            \"status\": \"success\",","            \"message\": f\"Uploaded {filename} to S3\",","            \"s3_url\": f\"s3://{manager.s3_bucket}/{filename}\"","        })","    except Exception as e:","        return jsonify({\"status\": \"error\", \"message\": str(e)}), 500","","@app.route(\"/\", methods=[\"GET\"])","def home():","    return \"Welcome to the AI-Based Expense Tracker API! Use /add_expense, /submit_expense, /upload_receipt or /split_expense.\"","","if __name__ == \"__main__\":","    app.run(debug=True, host=\"0.0.0.0\", port=8080)",""],"id":112},{"start":{"row":0,"column":0},"end":{"row":116,"column":0},"action":"insert","lines":["from flask import Flask, request, jsonify, render_template","from ExpenseManagerLib import ExpenseManagerLib","import logging","import watchtower","import os","from werkzeug.utils import secure_filename","import datetime","import uuid","from decimal import Decimal","","print(\"üìÅ Using ExpenseManagerLib from:\", ExpenseManagerLib.__module__)","","app = Flask(__name__)","manager = ExpenseManagerLib()","","# Set up CloudWatch logging","logger = logging.getLogger(__name__)","logger.setLevel(logging.INFO)","try:","    handler = watchtower.CloudWatchLogHandler(log_group='ExpenseTrackerLogGroup')","    logger.addHandler(handler)","except Exception as e:","    print(\"CloudWatch logging failed:\", e)","","@app.route(\"/submit_expense\", methods=[\"GET\", \"POST\"])","def submit_expense():","    if request.method == \"POST\":","        description = request.form[\"description\"]","        amount = request.form[\"amount\"]","        date = request.form[\"date\"]","        transaction = {","            \"description\": description,","            \"amount\": amount,","            \"date\": date","        }","        result = manager.save_transaction(transaction)","        return jsonify({\"status\": \"success\", \"transaction\": result})","    return render_template(\"form.html\")","","@app.route(\"/add_expense\", methods=[\"POST\"])","def add_expense():","    try:","        data = request.json","        print(\"üì• Incoming data:\", data)","        result = manager.save_transaction(data)","        print(\"‚úÖ Saved to DB:\", result)","        return jsonify({\"status\": \"success\", \"transaction\": result})","    except Exception as e:","        print(\"‚ùå Error occurred:\", e)","        return jsonify({\"status\": \"error\", \"message\": str(e)}), 500","","@app.route(\"/split_expense\", methods=[\"POST\"])","def split_expense():","    try:","        data = request.json","        total_amount = Decimal(str(data['total_amount']))","        users = data['users']","        share = total_amount / len(users)","        today = str(datetime.date.today())","","        table = manager.dynamodb.Table(manager.table_name)","        split_details = {}","","        for user in users:","            transaction = {","                \"transaction_id\": str(uuid.uuid4()),","                \"description\": f\"Split with {user}\",","                \"amount\": share,","                \"date\": today,","                \"category\": \"split\"","            }","            table.put_item(Item={","                \"transaction_id\": transaction[\"transaction_id\"],","                \"description\": transaction[\"description\"],","                \"amount\": Decimal(str(share)),","                \"date\": today,","                \"category\": \"split\"","            })","            split_details[user] = float(share)","","        logger.info(f\"Split entries saved for: {split_details}\")","        return jsonify({\"status\": \"success\", \"split_details\": split_details})","    except Exception as e:","        print(\"‚ùå Error in /split_expense:\", e)","        return jsonify({\"status\": \"error\", \"message\": str(e)}), 500","","@app.route(\"/upload_receipt\", methods=[\"POST\"])","def upload_receipt():","    if 'file' not in request.files:","        return jsonify({\"error\": \"No file part\"}), 400","","    file = request.files['file']","    if file.filename == '':","        return jsonify({\"error\": \"No selected file\"}), 400","","    filename = secure_filename(file.filename)","    filepath = os.path.join(\"/tmp\", filename)","    file.save(filepath)","","    try:","        manager.s3.upload_file(filepath, manager.s3_bucket, filename)","        logger.info(f\"Receipt uploaded: {filename}\")","        return jsonify({","            \"status\": \"success\",","            \"message\": f\"Uploaded {filename} to S3\",","            \"s3_url\": f\"s3://{manager.s3_bucket}/{filename}\"","        })","    except Exception as e:","        return jsonify({\"status\": \"error\", \"message\": str(e)}), 500","","@app.route(\"/\", methods=[\"GET\"])","def home():","    return \"Welcome to the AI-Based Expense Tracker API! Use /add_expense, /submit_expense, /upload_receipt or /split_expense.\"","","if __name__ == \"__main__\":","    app.run(debug=True, host=\"0.0.0.0\", port=8080)",""]}],[{"start":{"row":0,"column":0},"end":{"row":118,"column":0},"action":"remove","lines":["from flask import Flask, request, jsonify, render_template","from ExpenseManagerLib import ExpenseManagerLib","import logging","import watchtower","import os","from werkzeug.utils import secure_filename","import datetime","import uuid","from decimal import Decimal","","print(\"üìÅ Using ExpenseManagerLib from:\", ExpenseManagerLib.__module__)","","app = Flask(__name__)","manager = ExpenseManagerLib()","","# Set up CloudWatch logging","logger = logging.getLogger(__name__)","logger.setLevel(logging.INFO)","try:","    handler = watchtower.CloudWatchLogHandler(log_group='ExpenseTrackerLogGroup')","    logger.addHandler(handler)","except Exception as e:","    print(\"CloudWatch logging failed:\", e)","","@app.route(\"/submit_expense\", methods=[\"GET\", \"POST\"])","def submit_expense():","    if request.method == \"POST\":","        description = request.form[\"description\"]","        amount = request.form[\"amount\"]","        date = request.form[\"date\"]","        transaction = {","            \"description\": description,","            \"amount\": amount,","            \"date\": date","        }","        result = manager.save_transaction(transaction)","        return jsonify({\"status\": \"success\", \"transaction\": result})","    return render_template(\"form.html\")","","@app.route(\"/add_expense\", methods=[\"POST\"])","def add_expense():","    try:","        data = request.json","        print(\"üì• Incoming data:\", data)","        result = manager.save_transaction(data)","        print(\"‚úÖ Saved to DB:\", result)","        return jsonify({\"status\": \"success\", \"transaction\": result})","    except Exception as e:","        print(\"‚ùå Error occurred:\", e)","        return jsonify({\"status\": \"error\", \"message\": str(e)}), 500","","@app.route(\"/split_expense\", methods=[\"POST\"])","def split_expense():","    try:","        data = request.json","        total_amount = Decimal(str(data['total_amount']))","        users = data['users']","        share = total_amount / len(users)","        today = str(datetime.date.today())","","        table = manager.dynamodb.Table(manager.table_name)","        split_details = {}","","        for user in users:","            transaction = {","                \"transaction_id\": str(uuid.uuid4()),","                \"description\": f\"Split with {user}\",","                \"amount\": share,","                \"date\": today,","                \"category\": \"split\"","            }","            table.put_item(Item={","                \"transaction_id\": transaction[\"transaction_id\"],","                \"description\": transaction[\"description\"],","                \"amount\": Decimal(str(share)),","                \"date\": today,","                \"category\": \"split\"","            })","            split_details[user] = float(share)","","        logger.info(f\"Split entries saved for: {split_details}\")","        return jsonify({\"status\": \"success\", \"split_details\": split_details})","    except Exception as e:","        print(\"‚ùå Error in /split_expense:\", e)","        return jsonify({\"status\": \"error\", \"message\": str(e)}), 500","","@app.route(\"/upload_receipt\", methods=[\"POST\"])","def upload_receipt():","    if 'file' not in request.files:","        return jsonify({\"error\": \"No file part\"}), 400","","    file = request.files['file']","    if file.filename == '':","        return jsonify({\"error\": \"No selected file\"}), 400","","    filename = secure_filename(file.filename)","    filepath = os.path.join(\"/tmp\", filename)","    file.save(filepath)","","    try:","        manager.s3.upload_file(filepath, manager.s3_bucket, filename)","        logger.info(f\"Receipt uploaded: {filename}\")","        return jsonify({","            \"status\": \"success\",","            \"message\": f\"Uploaded {filename} to S3\",","            \"s3_url\": f\"s3://{manager.s3_bucket}/{filename}\"","        })","    except Exception as e:","        return jsonify({\"status\": \"error\", \"message\": str(e)}), 500","","@app.route(\"/\", methods=[\"GET\"])","def home():","    return \"Welcome to the AI-Based Expense Tracker API! Use /add_expense, /submit_expense, /upload_receipt or /split_expense.\"","","if __name__ == \"__main__\":","    app.run(debug=True, host=\"0.0.0.0\", port=8080)","","",""],"id":113},{"start":{"row":0,"column":0},"end":{"row":107,"column":0},"action":"insert","lines":["from flask import Flask, request, jsonify, render_template","from ExpenseManagerLib import ExpenseManagerLib","import logging","import watchtower","import os","from werkzeug.utils import secure_filename","","print(\"üìÅ Using ExpenseManagerLib from:\", ExpenseManagerLib.__module__)","","app = Flask(__name__)","manager = ExpenseManagerLib()","","# Set up CloudWatch logging","logger = logging.getLogger(__name__)","logger.setLevel(logging.INFO)","try:","    handler = watchtower.CloudWatchLogHandler(log_group='ExpenseTrackerLogGroup')","    logger.addHandler(handler)","except Exception as e:","    print(\"CloudWatch logging failed:\", e)","","# ‚úÖ Route for form-based expense submission","@app.route(\"/submit_expense\", methods=[\"GET\", \"POST\"])","def submit_expense():","    if request.method == \"POST\":","        description = request.form[\"description\"]","        amount = request.form[\"amount\"]","        date = request.form[\"date\"]","        transaction = {","            \"description\": description,","            \"amount\": amount,","            \"date\": date","        }","        result = manager.save_transaction(transaction)","        return jsonify({\"status\": \"success\", \"transaction\": result})","    return render_template(\"form.html\")","","# ‚úÖ API route to add expense","@app.route(\"/add_expense\", methods=[\"POST\"])","def add_expense():","    try:","        data = request.json","        print(\"üì• Incoming data:\", data)","        result = manager.save_transaction(data)","        print(\"‚úÖ Saved to DB:\", result)","        return jsonify({\"status\": \"success\", \"transaction\": result})","    except Exception as e:","        print(\"‚ùå Error occurred:\", e)","        return jsonify({\"status\": \"error\", \"message\": str(e)}), 500","","# ‚úÖ API route to split expenses (POST)","@app.route(\"/split_expense\", methods=[\"POST\"])","def split_expense():","    data = request.json","    result = manager.split_expense(data['total_amount'], data['users'])","    logger.info(f\"Expense split result: {result}\")","    return jsonify({\"status\": \"success\", \"split_details\": result})","","# ‚úÖ HTML form route to test split expenses in browser","@app.route(\"/split_form\", methods=[\"GET\", \"POST\"])","def split_form():","    if request.method == \"POST\":","        total_amount = float(request.form[\"total_amount\"])","        users = request.form[\"users\"].split(\",\")  # comma-separated usernames","        result = manager.split_expense(total_amount, users)","        return jsonify({\"status\": \"success\", \"split_details\": result})","    return '''","        <h2>Split Expense Form</h2>","        <form method=\"post\">","            Total Amount: <input type=\"text\" name=\"total_amount\"><br><br>","            Users (comma-separated): <input type=\"text\" name=\"users\"><br><br>","            <input type=\"submit\" value=\"Split Expense\">","        </form>","    '''","","# ‚úÖ Upload receipt to S3","@app.route(\"/upload_receipt\", methods=[\"POST\"])","def upload_receipt():","    if 'file' not in request.files:","        return jsonify({\"error\": \"No file part\"}), 400","","    file = request.files['file']","    if file.filename == '':","        return jsonify({\"error\": \"No selected file\"}), 400","","    filename = secure_filename(file.filename)","    filepath = os.path.join(\"/tmp\", filename)","    file.save(filepath)","","    try:","        manager.s3.upload_file(filepath, manager.s3_bucket, filename)","        logger.info(f\"Receipt uploaded: {filename}\")","        return jsonify({","            \"status\": \"success\",","            \"message\": f\"Uploaded {filename} to S3\",","            \"s3_url\": f\"s3://{manager.s3_bucket}/{filename}\"","        })","    except Exception as e:","        return jsonify({\"status\": \"error\", \"message\": str(e)}), 500","","# ‚úÖ Home route","@app.route(\"/\", methods=[\"GET\"])","def home():","    return \"Welcome to the AI-Based Expense Tracker API! Use /add_expense, /submit_expense, /upload_receipt, /split_expense or /split_form.\"","","if __name__ == \"__main__\":","    app.run(debug=True, host=\"0.0.0.0\", port=8080)",""]}],[{"start":{"row":107,"column":0},"end":{"row":115,"column":0},"action":"insert","lines":["@app.route(\"/split_form\", methods=[\"GET\", \"POST\"])","def split_form():","    if request.method == \"POST\":","        total_amount = float(request.form[\"total_amount\"])","        users = request.form.getlist(\"users\")","        result = manager.split_expense(total_amount, users)","        return render_template(\"split_result.html\", result=result)","    return render_template(\"split_form.html\")",""],"id":114}]]},"ace":{"folds":[],"scrolltop":1492.5,"scrollleft":0,"selection":{"start":{"row":109,"column":32},"end":{"row":109,"column":32},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":105,"state":"start","mode":"ace/mode/python"}},"timestamp":1741907680421,"hash":"aa6e56f6feb44a235e9c290920f0015c5aa95d4f"}